/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"

[scriptable, function, uuid(91824160-fb25-11e1-a21f-0800200c9a66)]
interface nsIWifiTetheringCallback : nsISupports
{
  /**
   * Callback function used to report status to WifiManager.
   *
   * @param error
   *        An error message if the operation wasn't successful,
   *        or `null` if it was.
   */
  void wifiTetheringEnabledChange(in jsval error);
};

[scriptable, function, uuid(a464a8e6-0fd5-4250-ab22-991a3488fd37)]
interface nsIInterfaceStatsInfo : nsISupports
{

  attribute AString name;
  attribute unsigned long rxBytes;
  attribute unsigned long txBytes;

};

[scriptable, function, uuid(9c128e68-5e4b-4626-bb88-84ec54cce5d8)]
interface nsINetworkStatsCallback : nsISupports
{
  void networkStatsAvailable(in boolean success,
                             in Array<nsIInterfaceStatsInfo> stats,
                             in unsigned long long timestamp);
};

[scriptable, function, uuid(0706bfa2-ac2d-11e2-9a8d-7b6d988d4767)]
interface nsINetworkUsageAlarmCallback : nsISupports
{
  void networkUsageAlarmResult(in jsval error);
};

[scriptable, function, uuid(097878b0-19fc-11e3-8ffd-0800200c9a66)]
interface nsISetDhcpServerCallback : nsISupports
{
  /**
   * Callback function used to report the DHCP server set result
   *
   * @param error
   *        An error message if the operation wasn't successful,
   *        or `null` if it was.
   */
  void dhcpServerResult(in jsval error);
};

[scriptable, function, uuid(4e88e3d4-5b72-4041-b80c-fb2c36707a2b)]
interface nsIUsbTetheringApiCallback : nsISupports
{
  /**
   * Callback function used to report usb api enable/disable result.
   */
  void usbMessageCallback(in boolean success);
};

[scriptable, function, uuid(32407c50-46c7-11e3-8f96-0800200c9a66)]
interface nsIUsbTetheringCallback : nsISupports
{
  /**
   * Callback function used to report status of enabling usb tethering.
   *
   * @param error
   *        An error message if the operation wasn't successful,
   *        or `null` if it was.
   * @param msgCallback
   *        Callback function used to report usb api enable/disable result.
   */
  void usbTetheringEnabledChange(in jsval error, in nsIUsbTetheringApiCallback msgCallback);
};

[scriptable, function, uuid(4f07ca30-46ad-31e3-8f96-0730210c9ac6)]
interface nsIUpdateUpStreamCallback : nsISupports
{
  /**
   * Callback function used to report the result of updating upstream.
   *
   * @param type
   *        The tethering type.
   * @param success
   *        Boolean to indicate the operation is successful or not.
   * @param externalIfname
   *        The external interface name.
   */
  void updateUpStreamResult(in AString type, in boolean success, in AString externalIfname);
};

[scriptable, function, uuid(eedca6c0-1310-11e4-9191-0800200c9a66)]
interface nsISetDnsCallback : nsISupports
{
  /**
   * Callback function used to report the result of setting DNS server.
   *
   * @param error
   *        An error message if the operation wasn't successful,
   *        or `null` if it was.
   */
  void setDnsResult(in jsval error);
};

[scriptable, function, uuid(5d0e1a60-1187-11e4-9191-0800200c9a66)]
interface nsINativeCommandCallback : nsISupports
{
  /**
   * Callback function used to report the result of a network native command.
   *
   * @param success
   *        Boolean to indicate the operation is successful or not.
   */
  void nativeCommandResult(in boolean success);
};

[scriptable, function, uuid(694abb80-1187-11e4-9191-0800200c9a66)]
interface nsIDhcpRequestCallback : nsISupports
{
  /**
   * Callback function used to report the result of DHCP client request.
   *
   * @param success
   *        Boolean to indicate the operation is successful or not.
   *
   * @param dhcpInfo
   *        An object to represent the successful DHCP request:
   *
   *          - gateway_str: string
   *          - dns1_str:    string
   *          - dns2_str:    string
   *          - mask_str:    string
   *          - server_str:  string
   *          - vendor_str:  string
   *          - lease:       long
   *          - mask:        long
   *          - ipaddr:      long
   *          - gateway:     long
   *          - dns1:        long
   *          - dns2:        long
   *          - server:      long
   */
  void dhcpRequestResult(in boolean success, in jsval dhcpInfo);
};

[scriptable, function, uuid(88e3ee22-f1b3-4fa0-8a5d-793fb827c42c)]
interface nsIGetInterfacesCallback : nsISupports
{
  /**
   * Callback function used to return the list of existing network interfaces.
   *
   * @param success
   *        Boolean to indicate the operation is successful or not.
   * @param interfaceList
   *        An array of interface name.
   */
  void getInterfacesResult(in boolean success, in jsval interfaceList);
};

[scriptable, function, uuid(064e02a3-d2c0-42c5-a293-1efa84056100)]
interface nsIGetInterfaceConfigCallback : nsISupports
{
  /**
   * Callback function used to return the network config of a given interface.
   *
   * @param success
   *        Boolean to indicate the operation is successful or not.
   * @param result
   *        .ip: Ip address.
   *        .prefix: mask length.
   *        .link: network link properties.
   *        .mac: mac address.
   */
  void getInterfaceConfigResult(in boolean success, in jsval result);
};

[scriptable, function, uuid(b370f360-6ba8-4517-a4f9-31e8f004ee91)]
interface nsISetInterfaceConfigCallback : nsISupports
{
  /**
   * Callback function used to set network config for a specified interface.
   *
   * @param success
   *        Boolean to indicate the operation is successful or not.
   */
  void setInterfaceConfigResult(in boolean success);
};

[scriptable, function, uuid(b0ec5233-0a91-427d-be20-dc38f184c8ba)]
interface nsIStartClatdCallback : nsISupports
{
  /**
   * Callback function used to return the NAT64 address result from clatd.
   *
   * @param success
   *        Boolean to indicate the operation is successful or not.
   * @param clatdAddress
   *        Clatd address generate by clatd daemon.
   */
  void startClatdResult(in boolean success, in AString clatdAddress);
};

[scriptable, function, uuid(e381a45b-34b6-4512-bd1b-170dbb52a433)]
interface nsIGetTetherStatsCallback : nsISupports
{
  /**
   * Callback function used to return the list of tethering statistics.
   *
   * @param success
   *        Boolean to indicate the operation is successful or not.
   * @param tetherStats
   *        An array of tethering statistics structure.
   */
  void getTetherStatsResult(in boolean success, in jsval tetherStats);
};

/**
 * Provide network services.
 */
[scriptable, uuid(243c491c-8687-41e4-9faf-c62e55a6c7b3)]
interface nsINetworkService : nsISupports
{
  const long MODIFY_ROUTE_ADD    = 0;
  const long MODIFY_ROUTE_REMOVE = 1;

  /**
   * Enable or disable Wifi Tethering
   *
   * @param enabled
   *        Boolean that indicates whether tethering should be enabled (true) or disabled (false).
   * @param config
   *        The Wifi Tethering configuration from settings db.
   * @param callback
   *        Callback function used to report status to WifiManager.
   */
  void setWifiTethering(in boolean enabled,
                        in jsval config,
                        in nsIWifiTetheringCallback callback);

  /**
   * Enable or disable DHCP server
   *
   * @param enabled
   *        Boolean that indicates enabling or disabling DHCP server.
   *
   * @param config
   *        Config used to enable the DHCP server. It contains
   *        .startIp    start of the ip lease range (string)
   *        .endIp      end of the ip lease range (string)
   *        .serverIp   ip of the DHCP server (string)
   *        .maskLength the length of the subnet mask
   *        .ifname     the interface name
   *
   *        As for disabling the DHCP server, put this value |null|.
   *
   * @param callback
   *        Callback function used to report status.
   */
  void setDhcpServer(in boolean enabled,
                     in jsval config,
                     in nsISetDhcpServerCallback callback);


  /**
   * Retrieve network interfaces stats.
   *
   * @param interfaceName
   *        Select a Network interface to request estats.
   *        If the interfaceName is not specified, it will return estats of all interfaces.
   *
   * @param callback
   *        Callback to notify result and provide stats, connectionType
   *        and the date when stats are retrieved
   */
  void getNetworkInterfaceStats(in ACString interfaceName,
                                in nsINetworkStatsCallback callback);

  /**
   * Set Alarm of usage per interface
   *
   * @param networkName
   *        Select the Network interface to set an alarm.
   *
   * @param threshold
   *        Amount of data that will trigger the alarm.
   *
   * @param callback
   *        Callback to notify the result.
   *
   * @return false if there is no interface registered for the networkType param.
   */
  boolean setNetworkInterfaceAlarm(in AString networkName,
                                   in long long threshold,
                                   in nsINetworkUsageAlarmCallback callback);

  /**
   * Set USB tethering.
   *
   * @param enabled
   *        Boolean to indicate we are going to enable or disable usb tethering.
   * @param config
   *        The usb tethering configuration.
   * @param msgCallback
            Callback function used to report usb api enable/disable result.
   * @param callback
   *        Callback function used to report the result enabling/disabling usb tethering.
   */
  void setUSBTethering(in boolean enabled,
                       in jsval config,
                       in nsIUsbTetheringApiCallback msgCallback,
                       in nsIUsbTetheringCallback callback);

  /**
   * Reset routing table.
   *
   * @param interfaceName
   *        The name of the network interface we want to remove from the routing
   *        table.
   *
   * @param callback
   *        Callback to notify the result of resetting routing table.
   */
  void resetRoutingTable(in AString interfaceName,
                         in nsINativeCommandCallback callback);

  /**
   * Set DNS.
   *
   * @param interfaceName
   *        The network interface name of the DNS we want to set.
   * @param dnsesCount
   *        Number of elements in dnses.
   * @param dnses
   *        Dnses to set.
   *
   * @param callback
   *        Callback to notify the result of setting DNS server.
   */
  void setDNS(in AString interfaceName,
              in unsigned long dnsesCount,
              [array, size_is(dnsesCount)] in wstring dnses,
              in nsISetDnsCallback callback);

  /**
   * Set default.
   *
   * @param interfaceName
   *        The network interface name of the default route we want to set.
   * @param callback
   *        Callback to notify the result of setting default.
   */
  void setDefaultNetwork(in AString interfaceName,
                       in nsINativeCommandCallback callback);

  /**
   * Set default route.
   *
   * @param interfaceName
   *        The network interface name of the default route we want to set.
   * @param count
   *        Number of elements in gateways.
   * @param gateways
   *        Default gateways for setting default route.
   * @param callback
   *        Callback to notify the result of setting default route.
   *
   *
   * NOTE: This API currently only can handle single gataway config.
   * TODO: Change the IDL interface for single gateway config.
   */
  void setDefaultRoute(in AString interfaceName,
                       in unsigned long count,
                       [array, size_is(count)] in wstring gateways,
                       in nsINativeCommandCallback callback);

  /**
   * Remove default route.
   *
   * @param interfaceName
   *        The network interface name of the default route we want to remove.
   * @param count
   *        Number of elements in gateways.
   * @param gatways
   *        Default gateways for removing default route.
   *
   * @param callback
   *        Callback to notify the result of removing default route.
   *
   *
   * NOTE: This API currently only can handle single gataway config.
   * TODO: Change the IDL interface for single gateway config.
   */
  void removeDefaultRoute(in AString interfaceName,
                          in unsigned long count,
                          [array, size_is(count)] in wstring gateways,
                          in nsINativeCommandCallback callback);

  /**
   * Modify route.
   *
   * @param action
   *        nsINetworkService.MODIFY_ROUTE_ADD to add route and
   *        nsINetworkService.MODIFY_ROUTE_REMOVE to remove.
   * @param interfaceName
   *        Network interface name for the output of the host route.
   * @param host
   *        Host ip we want to remove route for.
   * @param prefixLength
   *        The prefix length of the route we'd like to modify.
   * @param [optional] gateway
   *        Gateway ip for the output of the host route.
   *
   * @return A deferred promise that resolves on success or rejects with a
   *         specified reason otherwise.
   */
  jsval modifyRoute(in long    action,
                    in AString interfaceName,
                    in AString host,
                    in long    prefixLength,
                    [optional] in AString gateway);

  /**
   * Add route to secondary routing table.
   *
   * @param interfaceName
   *        The network interface for this route.
   * @param route
   *        The route info should have the following fields:
   *        .ip: destination ip address
   *        .prefix: destination prefix
   *        .gateway: gateway ip address
   */
  void addSecondaryRoute(in AString interfaceName, in jsval route,
                         in nsINativeCommandCallback callback);

  /**
   * Remove route from secondary routing table.
   *
   * @param interfaceName
   *        The network interface for the route we want to remove.
   * @param route
   *        The route info should have the following fields:
   *        .ip: destination ip address
   *        .prefix: destination prefix
   *        .gateway: gateway ip address
   */
  void removeSecondaryRoute(in AString interfaceName, in jsval route,
                            in nsINativeCommandCallback callback);

  /**
   * Remove upstream.
   *
   * @param config
   *        The internal and external interface info..
   * @param callback
   *        Callback function to report the result.
   */
  void removeUpStream(in jsval config,
                      in nsINativeCommandCallback callback);

  /**
   * Update upstream.
   *
   * @param type
   *        The tethering type.
   * @param previous
   *        The previous internal and external interface.
   * @param current
   *        The current internal and external interface.
   * @param callback
   *        Callback function to report the result.
   */
  void updateUpStream(in jsval type,
                      in jsval previous,
                      in jsval current,
                      in nsIUpdateUpStreamCallback callback);

  /*
   * Obtain interfaces list.
   *
   * @param callback
   *        Callback function to return the result.
   */
  void getInterfaces(in nsIGetInterfacesCallback callback);

  /**
   * Get config of a network interface.
   *
   * @param ifname
   *        Target interface.
   * @param callback
   *        Callback function to report the result.
   */
  void getInterfaceConfig(in AString ifname, in nsIGetInterfaceConfigCallback callback);

  /**
   * Set config for a network interface.
   *
   * @param config
   *        .ifname: Target interface.
   *        .ip: Ip address.
   *        .prefix: mask length.
   *        .link: network link properties.
   * @param callback
   *        Callback function to report the result.
   */
  void setInterfaceConfig(in jsval config, in nsISetInterfaceConfigCallback callback);

  /**
   * Issue a DHCP client request.
   *
   * @param networkInterface
   *        The network interface which we wnat to do the DHCP request on.
   *
   * @param callback
   *        Callback to notify the result of the DHCP request.
   */
  void dhcpRequest(in AString interfaceName,
                   in nsIDhcpRequestCallback callback);

  /**
   * Stop Dhcp daemon.
   *
   * @param ifname
   *        Target interface.
   *
   * @param callback
   *        Callback to notify the result of stopping dhcp request.
   */
  void stopDhcp(in AString ifname,
                in nsINativeCommandCallback callback);

  /**
   * Create network (required to call prior to any networking operation).
   *
   * @param interfaceName
   *        The network interface name which we want to create network for.
   *
   * @param networkType
   *        The network type.
   *
   * @param callback
   *        Callback to notify the result of creating network.
   */
  void createNetwork(in AString interfaceName,
                     in long networkType,
                     in nsINativeCommandCallback callback);

  /**
   * Destroy network.
   *
   * @param interfaceName
   *        The network interface name of the network we want to destroy.
   *
   * @param networkType
   *        The network type.
   *
   * @param callback
   *        Callback to notify the result of destroying network.
   */
  void destroyNetwork(in AString interfaceName,
                      in long networkType,
                      in nsINativeCommandCallback callback);

  /**
   * Add interface to network (required to call prior to any networking operation).
   *
   * @param netId
   *        The network id which we want to add network for.
   *
   * @param interfaceName
   *        The network interface name which we want to create network for.
   *
   * @param callback
   *        Callback to notify the result of creating network.
   */
  void addInterfaceToNetwork(in long netId,
                             in AString interfaceName,
                             in nsINativeCommandCallback callback);
  /**
   * Remove interface to network (required to call prior to any networking operation).
   *
   * @param netId
   *        The network id which we want to remove network for.
   *
   * @param interfaceName
   *        The network interface name which we want to remove network for.
   *
   * @param callback
   *        Callback to notify the result of removing network.
   */
  void removeInterfaceToNetwork(in long netId,
                                in AString interfaceName,
                                in nsINativeCommandCallback callback);


  /**
   * Query the netId associated with given network interface name.
   *
   * @param interfaceName
   *        The network interface name which we want to query.
   *
   * @return A deferred promise that resolves with a string to indicate.
   *         the queried netId on success and rejects if the interface name
   *         is invalid.
   *
   */
  jsval getNetId(in AString interfaceName);

  /**
   * Enable/Disable ipv6 abilities for a network interface.
   *
   * @param interfaceName
   *        The name of the network interface that we want to set ipv6 abilities.
   *
   * @param enable
   *        Boolean to indicate we want enable or disable ipv6 abilities.
   *
   * @param callback
   *        Callback to notify the result of setting ipv6 abilities.
   */
  void setIpv6Status(in AString interfaceName, in boolean enable,
                     in nsINativeCommandCallback callback);

  /**
   * Set maximum transmission unit on a network interface.
   *
   * @param interfaceName
   *        The name of the network interface that we want to set mtu.
   * @param mtu
   *        Size of maximum tranmission unit.
   *
   * @param callback
   *        Callback to notify the result of setting mtu.
   */
  void setMtu(in AString interfaceName, in long mtu,
              in nsINativeCommandCallback callback);

  /**
   * Start clatd control.
   *
   * @param networkInterface
   *        The network interface which we want to start.
   * @param
   *        Nat64 prefix for clatd usage.
   *
   * @param callback
   *        Callback to notify the result of clat control.
   */
  void startClatd(in AString interfaceName,
                  in AString nat64Prefix,
                  in nsIStartClatdCallback callback);

  /**
   * Stop clatd control.
   *
   * @param networkInterface
   *        The network interface which we want to stop.
   *
   * @param callback
   *        Callback to notify the result of clat control.
   */
  void stopClatd(in AString interfaceName,
                 in nsINativeCommandCallback callback);

  /**
   * Set NAT64 prefix discovery on the given interface.
   *
   * @param interfaceName
   *        The name of the network interface that we want to set NAT64 discover.
   *
   * @param enable
   *        Boolean to indicate we want enable or disable NAT64 discover.
   *
   * @param callback
   *        Callback to notify the result of setting NAT64 discover.
   */
  void setupPrefix64Discovery(in AString interfaceName,
                              in boolean enable,
                              in nsINativeCommandCallback callback);

  /**
   * Set tcp buffer size base on choose network type.
   *
   * @param tcpBufferSizes
   *        The tcp buffer sizes of network connection.
   *
   * @param callback
   *        Callback to notify the result of setting tcp buffer size.
   */
  void setTcpBufferSize(in AString tcpBufferSizes,
              in nsINativeCommandCallback callback);

  /*
   * Obtain tethering througput statistics.
   *
   * @param callback
   *        Callback function to return the result.
   */
  void getTetherStats(in nsIGetTetherStatsCallback callback);
};
