/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"
#include "nsIRilResult.idl"

interface nsISignalStrength;
interface nsICellIdentityGsm;
interface nsICellIdentityWcdma;
interface nsICellIdentityCdma;
interface nsICellIdentityLte;
interface nsICellIdentityTdScdma;
interface nsISetupDataCallResult;
interface nsIRadioCapability;
interface nsIKeepAliveStatus;
interface nsISupplySimDepersonalizationResult;
interface nsISlicingConfig;
interface nsIRadioAccessSpecifier;
interface nsIGetBarringInfoResult;
interface nsIAllowedCarriers;
interface nsISimSlotStatus;

/**
 * XPCOM component that provides the hidl response information.
 */
[scriptable, uuid(e90187db-a2d1-4302-b47c-f6d9fdaf2d21)]
interface nsIRilResponseResult : nsISupports
{
  /**
   * Message for RilResponseResult.
   */

  //RadioConst
  const long CDMA_ALPHA_INFO_BUFFER_LENGTH = 64;
  const long CDMA_NUMBER_INFO_BUFFER_LENGTH = 81;
  const long MAX_RILDS = 3;
  const long MAX_SOCKET_NAME_LENGTH = 6;
  const long MAX_CLIENT_ID_LENGTH = 2;
  const long MAX_DEBUG_SOCKET_NAME_LENGTH = 12;
  const long MAX_QEMU_PIPE_NAME_LENGTH = 11;
  const long MAX_UUID_LENGTH = 64;
  const long CARD_MAX_APPS = 8;
  const long CDMA_MAX_NUMBER_OF_INFO_RECS = 10;
  const long SS_INFO_MAX = 4;
  const long NUM_SERVICE_CLASSES = 7;
  const long NUM_TX_POWER_LEVELS = 5;

  //RadioError
  const long RADIO_ERROR_NONE = 0;
  const long RADIO_ERROR_NOT_AVAILABLE = 1;
  const long RADIO_ERROR_GENERIC_FAILURE = 2;
  const long RADIO_ERROR_PASSWOR_INCORRECT = 3;
  const long RADIO_ERROR_SIM_PIN2 = 4;
  const long RADIO_ERROR_SIM_PUK2 = 5;
  const long RADIO_ERROR_REQUEST_NOT_SUPPORTED = 6;
  const long RADIO_ERROR_CANCELLED = 7;
  const long RADIO_ERROR_OP_NOT_ALLOWED_DURING_VOICE_CALL = 8;
  const long RADIO_ERROR_OP_NOT_ALLOWED_BEFORE_REG_TO_NW = 9;
  const long RADIO_ERROR_SMS_SEND_FAIL_RETRY = 10;
  const long RADIO_ERROR_SIM_ABSENT = 11;
  const long RADIO_ERROR_SUBSCRIPTION_NOT_AVAILABLE = 12;
  const long RADIO_ERROR_MODE_NOT_SUPPORTED = 13;
  const long RADIO_ERROR_FDN_CHECK_FAILURE = 14;
  const long RADIO_ERROR_ILLEGAL_SIM_OR_ME = 15;
  const long RADIO_ERROR_MISSING_RESOURCE = 16;
  const long RADIO_ERROR_NO_SUCH_ELEMENT = 17;
  const long RADIO_ERROR_DIAL_MODIFIED_TO_USSD = 18;
  const long RADIO_ERROR_DIAL_MODIFIED_TO_SS = 19;
  const long RADIO_ERROR_DIAL_MODIFIED_TO_DIAL = 20;
  const long RADIO_ERROR_USSD_MODIFIED_TO_DIAL = 21;
  const long RADIO_ERROR_USSD_MODIFIED_TO_SS = 22;
  const long RADIO_ERROR_USSD_MODIFIED_TO_USSD = 23;
  const long RADIO_ERROR_SS_MODIFIED_TO_DIAL = 24;
  const long RADIO_ERROR_SS_MODIFIED_TO_USSD = 25;
  const long RADIO_ERROR_SUBSCRIPTION_NOT_SUPPORTED = 26;
  const long RADIO_ERROR_SS_MODIFIED_TO_SS = 27;
  const long RADIO_ERROR_LCE_NOT_SUPPORTED = 36;
  const long RADIO_ERROR_NO_MEMORY = 37;
  const long RADIO_ERROR_INTERNAL_ERR = 38;
  const long RADIO_ERROR_SYSTEM_ERR = 39;
  const long RADIO_ERROR_MODEM_ERR = 40;
  const long RADIO_ERROR_INVALID_STATE = 41;
  const long RADIO_ERROR_NO_RESOURCES = 42;
  const long RADIO_ERROR_SIM_ERR = 43;
  const long RADIO_ERROR_INVALID_ARGUMENTS = 44;
  const long RADIO_ERROR_INVALID_SIM_STATE = 45;
  const long RADIO_ERROR_INVALID_MODEM_STATE = 46;
  const long RADIO_ERROR_INVALID_CALL_ID = 47;
  const long RADIO_ERROR_NO_SMS_TO_ACK = 48;
  const long RADIO_ERROR_NETWORK_ERR = 49;
  const long RADIO_ERROR_REQUEST_RATE_LIMITED = 50;
  const long RADIO_ERROR_SIM_BUSY = 51;
  const long RADIO_ERROR_SIM_FULL = 52;
  const long RADIO_ERROR_NETWORK_REJECT = 53;
  const long RADIO_ERROR_OPERATION_NOT_ALLOWED = 54;
  const long RADIO_ERROR_EMPTY_RECORD = 55;
  const long RADIO_ERROR_INVALID_SMS_FORMAT = 56;
  const long RADIO_ERROR_ENCODING_ERR = 57;
  const long RADIO_ERROR_INVALID_SMSC_ADDRESS = 58;
  const long RADIO_ERROR_NO_SUCH_ENTRY = 59;
  const long RADIO_ERROR_NETWORK_NOT_READY = 60;
  const long RADIO_ERROR_NOT_PROVISIONED = 61;
  const long RADIO_ERROR_NO_SUBSCRIPTION = 62;
  const long RADIO_ERROR_NO_NETWORK_FOUND = 63;
  const long RADIO_ERROR_DEVICE_IN_USE = 64;

  /*TODO: fill all error*/
  const long RADIO_ERROR_ABORTED = 65;
  const long RADIO_ERROR_INVALID_RESPONSE = 66;
  const long RADIO_ERROR_SIMULTANEOUS_SMS_AND_CALL_NOT_ALLOWED = 67;
  const long RADIO_ERROR_ACCESS_BARRED = 68;
  const long RADIO_ERROR_BLOCKED_DUE_TO_CALL = 69;
  const long RADIO_ERROR_RF_HARDWARE_ISSUE = 70;
  const long RADIO_ERROR_NO_RF_CALIBRATION_INFO = 71;

  readonly attribute AString rilMessageType;
  readonly attribute long rilMessageToken;

  // RADIO_ERROR_*
  readonly attribute long errorMsg;

  /**
   * The imei for getDeviceIdentityResponse.
   */
  readonly attribute AString imei;

  /**
   * The imeisv for getDeviceIdentityResponse.
   */
  readonly attribute AString imeisv;

  /**
   * The esn for getDeviceIdentityResponse.
   */
  readonly attribute AString esn;

  /**
   * The meid for getDeviceIdentityResponse.
   */
  readonly attribute AString meid;

  /**
   * The meid for getVoiceRadioTechnology.
   */
  readonly attribute long radioTech;

  /**
   * The meid for getBasebandVersion.
   */
  readonly attribute AString basebandVersion;

  // CardState
  const uint32_t CARD_STATE_UNINITIALIZED = 4294967294; // UINT32_MAX - 1
  const uint32_t CARD_STATE_UNDETECTED = 4294967295; // UINT32_MAX
  const uint32_t CARD_STATE_ABSENT = 0;
  const uint32_t CARD_STATE_PRESENT = 1;
  const uint32_t CARD_STATE_ERROR = 2;
  const uint32_t CARD_STATE_RESTRICTED = 3; // card is present but not
                                            // usable due to carrier
                                            // restrictions

  // PinState
  const long CARD_PIN_STATE_UNKNOWN = 0;
  const long CARD_PIN_STATE_ENABLED_NOT_VERIFIED = 1;
  const long CARD_PIN_STATE_ENABLED_VERIFIED = 2;
  const long CARD_PIN_STATE_DISABLED = 3;
  const long CARD_PIN_STATE_ENABLED_BLOCKED = 4;
  const long CARD_PIN_STATE_ENABLED_PERM_BLOCKED = 5;

  // AppType
  const long CARD_APPTYPE_UNKNOWN = 0;
  const long CARD_APPTYPE_SIM = 1;
  const long CARD_APPTYPE_USIM = 2;
  const long CARD_APPTYPE_RUIM = 3;
  const long CARD_APPTYPE_CSIM = 4;
  const long CARD_APPTYPE_ISIM = 5;

  // AppState
  const long CARD_APPSTATE_ILLEGAL = 29;
  const long CARD_APPSTATE_UNKNOWN = 0;
  const long CARD_APPSTATE_DETECTED = 1;
  const long CARD_APPSTATE_PIN = 2;                // If PIN1 or UPin is required.
  const long CARD_APPSTATE_PUK = 3;                // If PUK1 or Puk for UPin is required.
  const long CARD_APPSTATE_SUBSCRIPTION_PERSO = 4; // perso_substate should be looked
                                                   // at when app_state is assigned
                                                   // to this value.
  const long CARD_APPSTATE_READY = 5;

  // PersoSubstate
  const long CARD_PERSOSUBSTATE_UNKNOWN = 0;
  const long CARD_PERSOSUBSTATE_IN_PROGRESS = 1;
  const long CARD_PERSOSUBSTATE_READY = 2;
  const long CARD_PERSOSUBSTATE_SIM_NETWORK = 3;
  const long CARD_PERSOSUBSTATE_SIM_NETWORK_SUBSET = 4;
  const long CARD_PERSOSUBSTATE_SIM_CORPORATE = 5;
  const long CARD_PERSOSUBSTATE_SIM_SERVICE_PROVIDER = 6;
  const long CARD_PERSOSUBSTATE_SIM_SIM = 7;
  const long CARD_PERSOSUBSTATE_SIM_NETWORK_PUK = 8;
  const long CARD_PERSOSUBSTATE_SIM_NETWORK_SUBSET_PUK = 9;
  const long CARD_PERSOSUBSTATE_SIM_CORPORATE_PUK = 10;
  const long CARD_PERSOSUBSTATE_SIM_SERVICE_PROVIDER_PUK = 11;
  const long CARD_PERSOSUBSTATE_SIM_SIM_PUK = 12;
  const long CARD_PERSOSUBSTATE_RUIM_NETWORK1 = 13;
  const long CARD_PERSOSUBSTATE_RUIM_NETWORK2 = 14;
  const long CARD_PERSOSUBSTATE_RUIM_HRPD = 15;
  const long CARD_PERSOSUBSTATE_RUIM_CORPORATE = 16;
  const long CARD_PERSOSUBSTATE_RUIM_SERVICE_PROVIDER = 17;
  const long CARD_PERSOSUBSTATE_RUIM_RUIM = 18;
  const long CARD_PERSOSUBSTATE_RUIM_NETWORK1_PUK = 19;
  const long CARD_PERSOSUBSTATE_RUIM_NETWORK2_PUK = 20;
  const long CARD_PERSOSUBSTATE_RUIM_HRPD_PUK = 21;
  const long CARD_PERSOSUBSTATE_RUIM_CORPORATE_PUK = 22;
  const long CARD_PERSOSUBSTATE_RUIM_SERVICE_PROVIDER_PUK = 23;
  const long CARD_PERSOSUBSTATE_RUIM_RUIM_PUK = 24;
  const long CARD_PERSOSUBSTATE_SIM_SPN = 25;
  const long CARD_PERSOSUBSTATE_SIM_SPN_PUK = 26;
  const long CARD_PERSOSUBSTATE_SIM_SP_EHPLMN = 27;
  const long CARD_PERSOSUBSTATE_SIM_SP_EHPLMN_PUK = 28;
  const long CARD_PERSOSUBSTATE_SIM_ICCID = 29;
  const long CARD_PERSOSUBSTATE_SIM_ICCID_PUK = 30;
  const long CARD_PERSOSUBSTATE_SIM_IMPI = 31;
  const long CARD_PERSOSUBSTATE_SIM_IMPI_PUK = 32;
  const long CARD_PERSOSUBSTATE_SIM_NS_SP = 33;
  const long CARD_PERSOSUBSTATE_SIM_NS_SP_PUK = 34;

  readonly attribute nsICardStatus cardStatus;

  // Radio reg state.
  const long RADIO_REG_STATE_NOT_REG_MT_NOT_SEARCHING_OP = 0;     // Not registered, MT is not currently searching
                                                                  // a new operator to register
  const long RADIO_REG_STATE_REG_HOME = 1;                        // Registered, home network
  const long RADIO_REG_STATE_NOT_REG_MT_SEARCHING_OP = 2;         // Not registered, but MT is currently searching
                                                                  // a new operator to register
  const long RADIO_REG_STATE_REG_DENIED = 3;                      // Registration denied
  const long RADIO_REG_STATE_UNKNOWN = 4;                         // Unknown
  const long RADIO_REG_STATE_REG_ROAMING = 5;                     // Registered, roaming
  const long RADIO_REG_STATE_NOT_REG_MT_NOT_SEARCHING_OP_EM = 10; // Same as NOT_REG_MT_NOT_SEARCHING_OP but indicates that
                                                                  // emergency calls are enabled.
  const long RADIO_REG_STATE_NOT_REG_MT_SEARCHING_OP_EM = 12;     // Same as NOT_REG_MT_SEARCHING_OP but indicates that
                                                                  // emergency calls are enabled.
  const long RADIO_REG_STATE_REG_DENIED_EM = 13;                  // Same as REG_DENIED but indicates that
                                                                  // emergency calls are enabled.
  const long RADIO_REG_STATE_UNKNOWN_EM = 14;                     // Same as UNKNOWN but indicates that
                                                                  // emergency calls are enabled.

  // getVoiceRegistrationStateResponse
  readonly attribute nsIVoiceRegState voiceRegStatus;

  // getDataRegistrationStateResponse
  readonly attribute nsIDataRegState dataRegStatus;

  // getOperator
  readonly attribute nsIOperatorInfo operator;

  // getNetworkSelectionMode
  // nwModeManual false for automatic selection, true for manual selection
  readonly attribute boolean nwModeManual;

  // getSignalStrength
  readonly attribute nsISignalStrength signalStrength;

  /**
   * The smsc for GetSmscAddress.
   */
  readonly attribute AString smsc;

  // UusType type.
  const long CALL_UUSTYPE_TYPE1_IMPLICIT =     0;
  const long CALL_UUSTYPE_TYPE1_REQUIRED =     1;
  const long CALL_UUSTYPE_TYPE1_NOT_REQUIRED = 2;
  const long CALL_UUSTYPE_TYPE2_REQUIRED =     3;
  const long CALL_UUSTYPE_TYPE2_NOT_REQUIRED = 4;
  const long CALL_UUSTYPE_TYPE3_REQUIRED =     5;
  const long CALL_UUSTYPE_TYPE3_NOT_REQUIRED = 6;

  // UusDcs type.
  const long CALL_UUSDCS_USP =    0;
  const long CALL_UUSDCS_OSIHLP = 1;
  const long CALL_UUSDCS_X244 =   2;
  const long CALL_UUSDCS_RMCF =   3;
  const long CALL_UUSDCS_IA5C =   4;

  // CallPresentation
  const long CALL_PRESENTATION_ALLOWED =    0;
  const long CALL_PRESENTATION_RESTRICTED = 1;
  const long CALL_PRESENTATION_UNKNOWN =    2;
  const long CALL_PRESENTATION_PAYPHONE =   3;

  // CallState
  const long CALL_STATE_UNKNOWN = -1;
  const long CALL_STATE_ACTIVE =   0;
  const long CALL_STATE_HOLDING =  1;
  const long CALL_STATE_DIALING =  2;
  const long CALL_STATE_ALERTING = 3;
  const long CALL_STATE_INCOMING = 4;
  const long CALL_STATE_WAITING =  5;

  // getCurrentCalls
  void getCurrentCalls([optional] out unsigned long count,
                       [array, size_is(count), retval] out nsICall calls);

  /**
   * The causeCode for LastCallFailCause.
   */
  readonly attribute long causeCode;

  /**
   * The vendorCause for LastCallFailCause.
   */
  readonly attribute AString vendorCause;

  // Prefer network type
  const long PREFERRED_NETWORK_TYPE_GSM_WCDMA = 0;                      // GSM/WCDMA (WCDMA preferred)
  const long PREFERRED_NETWORK_TYPE_GSM_ONLY = 1;                       // GSM only
  const long PREFERRED_NETWORK_TYPE_WCDMA = 2;                          // WCDMA
  const long PREFERRED_NETWORK_TYPE_GSM_WCDMA_AUTO = 3;                 // GSM/WCDMA (auto mode, according to PRL)
  const long PREFERRED_NETWORK_TYPE_CDMA_EVDO_AUTO = 4;                 // CDMA and EvDo (auto mode, according to PRL)
  const long PREFERRED_NETWORK_TYPE_CDMA_ONLY = 5;                      // CDMA only
  const long PREFERRED_NETWORK_TYPE_EVDO_ONLY = 6;                      // EvDo only
  const long PREFERRED_NETWORK_TYPE_GSM_WCDMA_CDMA_EVDO_AUTO = 7;       // GSM/WCDMA, CDMA, and EvDo (auto mode, according to PRL)
  const long PREFERRED_NETWORK_TYPE_LTE_CDMA_EVDO = 8;                  // LTE, CDMA and EvDo
  const long PREFERRED_NETWORK_TYPE_LTE_GSM_WCDMA = 9;                  // LTE, GSM/WCDMA
  const long PREFERRED_NETWORK_TYPE_LTE_CMDA_EVDO_GSM_WCDMA = 10;       // LTE, CDMA, EvDo, GSM/WCDMA
  const long PREFERRED_NETWORK_TYPE_LTE_ONLY = 11;                      // LTE only
  const long PREFERRED_NETWORK_TYPE_LTE_WCDMA = 12;                     // LTE/WCDMA
  const long PREFERRED_NETWORK_TYPE_TD_SCDMA_ONLY = 13;                 // TD-SCDMA only
  const long PREFERRED_NETWORK_TYPE_TD_SCDMA_WCDMA = 14;                // TD-SCDMA and WCDMA
  const long PREFERRED_NETWORK_TYPE_TD_SCDMA_LTE = 15;                  // TD-SCDMA and LTE
  const long PREFERRED_NETWORK_TYPE_TD_SCDMA_GSM = 16;                  // TD-SCDMA and GSM
  const long PREFERRED_NETWORK_TYPE_TD_SCDMA_GSM_LTE = 17;              // TD-SCDMA,GSM and LTE
  const long PREFERRED_NETWORK_TYPE_TD_SCDMA_GSM_WCDMA = 18;            // TD-SCDMA, GSM/WCDMA
  const long PREFERRED_NETWORK_TYPE_TD_SCDMA_WCDMA_LTE = 19;            // TD-SCDMA, WCDMA and LTE
  const long PREFERRED_NETWORK_TYPE_TD_SCDMA_GSM_WCDMA_LTE = 20;        // TD-SCDMA, GSM/WCDMA and LTE
  const long PREFERRED_NETWORK_TYPE_TD_SCDMA_GSM_WCDMA_CDMA_EVDO_AUTO = 21; // TD-SCDMA, GSM/WCDMA, CDMA and EvDo
  const long PREFERRED_NETWORK_TYPE_TD_SCDMA_LTE_CDMA_EVDO_GSM_WCDMA = 22;  // TD-SCDMA, LTE, CDMA, EvDo GSM/WCDMA

  // getPreferredNetworkTypeResponse
  readonly attribute long type;

  // Used for QUERY_AVAILABLE_NETWORKS status.
  const long QAN_STATE_UNKNOWN = 0;
  const long QAN_STATE_AVAILABLE = 1;
  const long QAN_STATE_CURRENT = 2;
  const long QAN_STATE_FORBIDDEN = 3;

  // getAvailableNetworks
  void getAvailableNetworks([optional] out unsigned long count,
                            [array, size_is(count), retval] out nsIOperatorInfo networks);

  // setupDataCallResponse
  readonly attribute nsISetupDataCallResult dcResponse;

  // getDataCallList
  void getDataCallLists([optional] out unsigned long count,
                        [array, size_is(count), retval] out nsISetupDataCallResult datacalls);

  // getCellInfoList
  void getCellInfoList([optional] out unsigned long count,
                       [array, size_is(count), retval] out nsIRilCellInfo cellInfos);

  // getIMSI
  readonly attribute AString imsi;

  // iccIOForApp
  readonly attribute nsIIccIoResult iccIo;

  // getCLIR
  readonly attribute long n;
  readonly attribute long m;

  // CallForward status
  const long CALL_FORWARD_STATE_DISABLE = 0;
  const long CALL_FORWARD_STATE_ENABLE = 1;
  const long CALL_FORWARD_STATE_INTERROGATE = 2;
  const long CALL_FORWARD_STATE_REGISTRATION = 3;
  const long CALL_FORWARD_STATE_ERASURE = 4;

  // getCallForwardStatus
  void getCallForwardStatus([optional] out unsigned long count,
                         [array, size_is(count), retval] out nsICallForwardInfo callForwardInfos);

  // getCallWaiting
  // getFacilityLockForApp
  readonly attribute boolean enable;
  readonly attribute long serviceClass;

  // Clip status;
  const long CLIP_STATE_PROVISIONED = 0;
  const long CLIP_STATE_UNPROVISIONED = 1;
  const long CLIP_STATE_UNKNOWN = 2;

  // getClip
  readonly attribute long provisioned;

  // getNeighboringCellIds
  void getNeighboringCids([optional] out unsigned long count,
                         [array, size_is(count), retval] out nsINeighboringCell cells);

  // Tty mode
  const long TTY_MODE_OFF = 0;
  const long TTY_MODE_FULL = 1;
  const long TTY_MODE_HCO = 2;
  const long TTY_MODE_VCO = 3;

  // quertTtyMode
  readonly attribute long ttyMode;

  readonly attribute boolean muteEnable;

  // For ICC pin/puk
  readonly attribute long remainingRetries;

  // False for Standard Privacy Mode (Public Long Code Mask)
  // True for Enhanced Privacy Mode (Private Long Code Mask)
  readonly attribute boolean enhancedVoicePrivacy;

  readonly attribute nsIRadioCapability radioCapability;

  // sendSms
  readonly attribute nsISendSmsResult sms;

  readonly attribute boolean uiccAppEnabled;

  readonly attribute nsIKeepAliveStatus keepAliveStatus;

  readonly attribute nsISupplySimDepersonalizationResult simDepersonalizationResult;

  readonly attribute boolean nrDualConnectivityEnabled;

  //updatedRecordIndex The index of the updated or inserted record in the phonebook and
  //the minimum value is 1
  readonly attribute long updatedRecordIndex;

  //allocatePduSessionIdResponse
  readonly attribute long allocatedId;

  readonly attribute nsIPhonebookCapacity phonebookCapacity;

  readonly attribute nsISlicingConfig slicingConfig;

  //getSystemSelectionChannelsResponse
  readonly attribute Array<nsIRadioAccessSpecifier>  specifiers;

  readonly attribute nsIGetBarringInfoResult barringInfoResults;

  // For getModemStackStatus
  readonly attribute boolean modemStackEnabled;

 /**
  * For getPreferredNetworkTypeBitmap
  * Bitmask of allowed network types .
  */
  readonly attribute long allowedNetworkTypesBitmask;

  /**
   * List of allowed carriers.
   * The character '?' is used as wildcard character to match any value.
   */
  readonly attribute nsIAllowedCarriers allowedCarriers;

  /**
  *  VoNR enabled
  */
  readonly attribute boolean voNREnabled;

  readonly attribute Array<nsISimSlotStatus> simSlotStatus;
};
