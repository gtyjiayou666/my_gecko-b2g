/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"
#include "nsINetworkInterface.idl"
#include "nsIDataCallInterfaceService.idl"

interface nsISliceInfo;
interface nsITrafficDescriptor;

[scriptable, uuid(b8bcd6aa-5b06-4362-a68c-317878429e51)]
interface nsIRilNetworkInfo : nsINetworkInfo
{
  readonly attribute unsigned long serviceId;
  readonly attribute AString iccId;

  /* The following attributes are for MMS proxy settings. */
  readonly attribute AString mmsc;     // Empty string if not set.
  readonly attribute AString mmsProxy; // Empty string if not set.
  readonly attribute long      mmsPort;  // -1 if not set.

  /**
   * Get the list of pcscf addresses, could be IPv4 or IPv6.
   *
   * @param count
   *        The length of the list of pcscf addresses.
   *
   * @returns the list of pcscf addresses.
   */
  void getPcscf([optional] out unsigned long count,
                [array, size_is(count), retval] out wstring pcscf);
};

[scriptable, function, uuid(cb2f0f5b-67f4-4c14-93e8-01e66b630464)]
interface nsIDeactivateDataCallsCallback : nsISupports
{
  /**
   * Callback function used to notify when all data calls are disconnected.
   */
  void notifyDataCallsDisconnected();
};

[scriptable, uuid(8124b5a0-87af-4425-9468-341fcea3b639)]
interface nsIDataCallHandler : nsISupports
{
  /**
   * PDP APIs
   *
   * @param networkType
   *        Mobile network type, that is,
   *        nsINetworkInfo.NETWORK_TYPE_MOBILE or one of the
   *        nsINetworkInfo.NETWORK_TYPE_MOBILE_* values.
   * @error For some case api would through an error.
   */
  void setupDataCallByType(in long networkType, [optional] in long dnn);
  void deactivateDataCallByType(in long networkType, [optional] in long dnn);
  long getDataCallStateByType(in long networkType);

  /**
   * Deactivate all data calls.
   *
   * @param reason
   *        The deactivate reason. One of the nsINetworkInfo.REASON_* values.
   * @param callback
   *        Callback to notify when all data calls are disconnected.
   */
  void deactivateAllDataCalls(in long reason, in nsIDeactivateDataCallsCallback callback);

  /**
   * Called to reconsider data call state.
   */
  void updateRILNetworkInterface();

  /**
   * Update PCO value.
   *
   * @param cid
   *        Context ID, uniquely identifies this call.
   * @param bearerProto
   *        One of the PDP_type values in TS 27.007 section 10.1.1.
   *        For example, "IP", "IPV6", "IPV4V6".
   * @param pcoId
   *        The protocol ID for this box.  Note that only IDs from  FF00H - FFFFH are accepted.
   *        If more than one is included from the network,
   *        multiple calls should be made to send all of them.
   * @param contents
   *        Carrier-defined content.  It is binary, opaque and loosely defined in LTE Layer 3 spec 24.008.
   * @param byteLength
   *        The number of octets in the contents.
   */
  void updatePcoData(in long cid,
                      in AString bearerProto,
                      in long pcoId,
                      in Array<uint8_t> contents);

  /**
   * Update SlicingConfig.
   *
   * @param sliceInfos
   *        array of sliceinfo.
   * @param sliceInfos
   *        array of TrafficDescriptors.
   */
  void updateSlicingConfig(in Array<nsISliceInfo> sliceInfos);
};

[scriptable, uuid(00333a9e-e80b-44be-8da3-dffb92999d47)]
interface nsIDataCallManager : nsISupports
{
  readonly attribute long dataDefaultServiceId;

  /**
   * Get the corresponding data call handler.
   *
   * @param clientId
   *        clientId of the data call handler to get.
   */
  nsIDataCallHandler getDataCallHandler(in unsigned long clientId);
};
