/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"

[scriptable, uuid(391e476b-8620-4abf-8701-7b058dc78fc2)]
interface nsIWifiConfiguration : nsISupports
{
  readonly attribute int32_t netId;
  readonly attribute AString ssid;
  readonly attribute AString bssid;
  readonly attribute AString keyMgmt;
  readonly attribute AString psk;
  readonly attribute AString wepKey0;
  readonly attribute AString wepKey1;
  readonly attribute AString wepKey2;
  readonly attribute AString wepKey3;
  readonly attribute int32_t wepTxKeyIndex;
  readonly attribute boolean scanSsid;
  readonly attribute boolean pmf;
  readonly attribute AString proto;
  readonly attribute AString authAlg;
  readonly attribute AString groupCipher;
  readonly attribute AString pairwiseCipher;

  readonly attribute AString eap;
  readonly attribute AString phase2;
  readonly attribute AString identity;
  readonly attribute AString anonymousId;
  readonly attribute AString password;
  readonly attribute AString clientCert;
  readonly attribute AString caCert;
  readonly attribute AString caPath;
  readonly attribute AString subjectMatch;
  readonly attribute AString engineId;
  readonly attribute boolean engine;
  readonly attribute AString privateKeyId;
  readonly attribute AString altSubjectMatch;
  readonly attribute AString domainSuffixMatch;
  readonly attribute boolean proactiveKeyCaching;
  readonly attribute int32_t simIndex;
};

[scriptable, uuid(2677465d-1061-483d-9d59-107339bb9b2b)]
interface nsISoftapConfiguration : nsISupports
{
  /** AP band */
  const int32_t AP_BAND_24GHZ = 0;
  const int32_t AP_BAND_5GHZ  = 1;
  const int32_t AP_BAND_ANY   = 2;

  /** Encryption type */
  const int32_t SECURITY_NONE = 0;
  const int32_t SECURITY_WPA  = 1;
  const int32_t SECURITY_WPA2 = 2;
};

[scriptable, uuid(9fb6b90f-1e28-41b2-96be-e1a2839ffd38)]
interface nsISupplicantDebugLevel : nsISupports
{
  const int32_t SUP_LOG_EXCESSIVE = 0;
  const int32_t SUP_LOG_MSGDUMP   = 1;
  const int32_t SUP_LOG_DEBUG     = 2;
  const int32_t SUP_LOG_INFO      = 3;
  const int32_t SUP_LOG_WARNING   = 4;
  const int32_t SUP_LOG_ERROR     = 5;

  /**
   * Contains the possible debug level in supplicant.
   * Only log messages with a level greater than the set level will be logged.
   */
  readonly attribute uint32_t logLevel;

  /**
   * Determines whether to show timestamps in log or not.
   */
  readonly attribute boolean showTimeStamp;

  /**
   * Determines whether to show key value in log or not.
   */
  readonly attribute boolean showKeys;
};

[scriptable, uuid(e0a33a58-53c9-4582-b9f0-5be688852975)]
interface nsIScanSettings : nsISupports
{
  /** Scan accuracy */
  const int32_t SCAN_TYPE_LOW_SPAN      = 0;
  const int32_t SCAN_TYPE_LOW_POWER     = 1;
  const int32_t SCAN_TYPE_HIGH_ACCURACY = 2;

  /** Band */
  const int32_t BAND_2_4_GHZ   = 0x1;
  const int32_t BAND_5_GHZ     = 0x2;
  const int32_t BAND_5_GHZ_DFS = 0x4;

  /** Scan type */
  const int32_t USE_SINGLE_SCAN = 0;
  const int32_t USE_PNO_SCAN = 1;
};

[scriptable, uuid(e4bec643-5d02-432a-8edf-182dee5917ab)]
interface nsIScanResult : nsISupports
{
  /** SSID of the BSS */
  readonly attribute AString ssid;

  /** BSSID of the BSS */
  readonly attribute AString bssid;

  /** Frequency in MHz */
  readonly attribute uint32_t frequency;

  /** TSF of the received probe response/beacon */
  readonly attribute uint32_t tsf;

  /**
   * This is a bit mask describing the capabilities of a BSS.
   * See IEEE Std 802.11: 8.4.1.4
   * Bit 0 - ESS
   * Bit 1 - IBSS
   * Bit 2 - CF Pollable
   * Bit 3 - CF-Poll Request
   * Bit 4 - Privacy
   * Bit 5 - Short Preamble
   * Bit 6 - PBCC
   * Bit 7 - Channel Agility
   * Bit 8 - Spectrum Mgmt
   * Bit 9 - QoS
   * Bit 10 - Short Slot Time
   * Bit 11 - APSD
   * Bit 12 - Radio Measurement
   * Bit 13 - DSSS-OFDM
   * Bit 14 - Delayed Block Ack
   * Bit 15 - Immediate Block Ack
   */
  readonly attribute uint32_t capability;

  /** Signal strength of probe response/beacon in (100 * dBm) */
  readonly attribute int32_t signal;

  /** Whether the network is associated */
  readonly attribute boolean associated;

  /**
   * Binary array containing the raw information elements
   * from the probe response/beacon.
   */
  Array<uint8_t> getInfoElement();
};

[scriptable, uuid(29980f77-f5a2-4ab7-8bff-68772c60e370)]
interface nsIStateChanged : nsISupports
{
  /** Supplicant state */
  const int32_t STATE_DISCONNECTED      = 0;
  const int32_t STATE_IFACE_DISABLED    = 1;
  const int32_t STATE_INACTIVE          = 2;
  const int32_t STATE_SCANNING          = 3;
  const int32_t STATE_AUTHENTICATING    = 4;
  const int32_t STATE_ASSOCIATING       = 5;
  const int32_t STATE_ASSOCIATED        = 6;
  const int32_t STATE_FOURWAY_HANDSHAKE = 7;
  const int32_t STATE_GROUP_HANDSHAKE   = 8;
  const int32_t STATE_COMPLETED         = 9;

  /**
   * Current state in supplicant.
   * Possible values: STATE_*.
   */
  readonly attribute uint32_t state;

  /**
   * The network id in supplicant that holding the new state.
   */
  readonly attribute int32_t id;

  /**
   * Bssid of the changed network.
   */
  readonly attribute AString bssid;

  /**
   * Ssid of the changed network.
   */
  readonly attribute AString ssid;
};

[scriptable, uuid(442ef797-8de0-4ad0-a11a-a89b7d1725e9)]
interface nsILinkLayerPacketStats : nsISupports
{
  /**
   * Number of received unicast data packets.
   */
  readonly attribute uint64_t rxMpdu;

  /**
   * Number of successfully transmitted unicast data pkts (ACK rcvd).
   */
  readonly attribute uint64_t txMpdu;

  /**
   * Number of transmitted unicast data pkt losses (no ACK).
   */
  readonly attribute uint64_t lostMpdu;

  /**
   * Number of transmitted unicast data retry pkts.
   */
  readonly attribute uint64_t retries;
};

[scriptable, uuid(035e3253-9e89-42a3-b847-beb04f8c05d1)]
interface nsILinkLayerRadioStats : nsISupports
{
  /**
   * Time for which the radio is awake.
   */
  readonly attribute uint32_t onTimeInMs;

  /**
   * Total time for which the radio is in active transmission.
   */
  readonly attribute uint32_t txTimeInMs;

  /**
   * Time for which the radio is in active receive.
   */
  readonly attribute uint32_t rxTimeInMs;

  /**
   * Total time for which the radio is awake due to scan.
   */
  readonly attribute uint32_t onTimeInMsForScan;

  /**
   * Time for which the radio is in active tranmission per tx level.
   */
  Array<uint32_t> getTxTimeInMsPerLevel();
};

[scriptable, uuid(f5c75e8e-17ea-40a5-997b-3394c59ab7ac)]
interface nsILinkLayerStats : nsISupports
{
  /**
   * Number beacons received from the connected AP.
   */
  readonly attribute uint32_t beaconRx;

  /**
   * Access Point Beacon and Management frames RSSI (averaged).
   */
  readonly attribute int32_t avgRssiMgmt;

  /**
   * WME Best Effort Access Category packet counters.
   */
  readonly attribute nsILinkLayerPacketStats wmeBePktStats;

  /**
   * WME Background Access Category packet counters.
   */
  readonly attribute nsILinkLayerPacketStats wmeBkPktStats;

  /**
   * WME Video Access Category packet counters.
   */
  readonly attribute nsILinkLayerPacketStats wmeViPktStats;

  /**
   * WME Voice Access Category packet counters.
   */
  readonly attribute nsILinkLayerPacketStats wmeVoPktStats;

  /**
   * TimeStamp for each stats sample.
   * This is the absolute milliseconds from boot when these stats were
   * sampled.
   */
  readonly attribute uint64_t timeStampMs;

  /**
   * Query link layer radio stats for current connected access point
   *
   * Invoke the function to get the return value for GET_LINK_LAYER_STATS.
   */
  Array<nsILinkLayerRadioStats> getLinkLayerRadioStats();
};
