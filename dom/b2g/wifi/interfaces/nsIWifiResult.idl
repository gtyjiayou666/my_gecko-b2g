/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"
#include "nsIWifiElement.idl"

interface nsIScanResult;

[scriptable, uuid(3489f412-1b19-4c6f-8cf2-703ac5c2aed8)]
interface nsIWifiResult : nsISupports
{
  /** Status code */
  const uint32_t SUCCESS = 0;
  const uint32_t ERROR_COMMAND_FAILED = 1;
  const uint32_t ERROR_INVALID_INTERFACE = 2;
  const uint32_t ERROR_INVALID_ARGS = 3;
  const uint32_t ERROR_NOT_SUPPORTED = 4;
  const uint32_t ERROR_TIMEOUT = 5;
  const uint32_t ERROR_UNKNOWN = 6;

  /**
   * If set indicates that the APF APIs are supported.
   * APF (Android Packet Filter) is a BPF like packet filtering
   * bytecode executed by the firmware.
   */
  const uint32_t FEATURE_APF = (1 << 0);
  /**
   * If set indicates that the Background Scan APIs are supported.
   * Background scan allow the host to send a number of buckets down to the
   * firmware. Each bucket contains a set of channels, a period, and some
   * parameters about how and when to report results.
   */
  const uint32_t FEATURE_BACKGROUND_SCAN = (1 << 1);
  /**
   * If set indicates that the link layer stats APIs are supported.
   */
  const uint32_t FEATURE_LINK_LAYER_STATS = (1 << 2);
  /**
   * If set indicates that the RSSI monitor APIs are supported.
   */
  const uint32_t FEATURE_RSSI_MONITOR = (1 << 3);
  /**
   * If set indicates that the roaming API's are supported.
   */
  const uint32_t FEATURE_CONTROL_ROAMING = (1 << 4);
  /**
   * If set indicates support for Probe IE allow listing.
   */
  const uint32_t FEATURE_PROBE_IE_ALLOWLIST = (1 << 5);
  /**
   * If set indicates support for MAC & Probe Sequence Number randomization.
   */
  const uint32_t FEATURE_SCAN_RAND = (1 << 6);
  /**
   * Support for 5 GHz Band.
   */
  const uint32_t FEATURE_STA_5G = (1 << 7);
  /**
   * Support for GAS/ANQP queries.
   */
  const uint32_t FEATURE_HOTSPOT = (1 << 8);
  /**
   * Support for Preferred Network Offload.
   */
  const uint32_t FEATURE_PNO = (1 << 9);
  /**
   * Support for Tunneled Direct Link Setup.
   */
  const uint32_t FEATURE_TDLS = (1 << 10);
  /**
   * Support for Tunneled Direct Link Setup off channel.
   */
  const uint32_t FEATURE_TDLS_OFFCHANNEL = (1 << 11);
  /**
   * Support for neighbour discovery offload.
   */
  const uint32_t FEATURE_ND_OFFLOAD = (1 << 12);
  /**
   * Support for keep alive packet offload.
   */
  const uint32_t FEATURE_KEEP_ALIVE = (1 << 13);
  /**
   * Support for tracking connection packets' fate.
   */
  const uint32_t FEATURE_DEBUG_PACKET_FATE = (1 << 14);
  /**
   * Memory dump of Firmware.
   */
  const uint32_t FEATURE_DEBUG_MEMORY_FIRMWARE_DUMP = (1 << 15);
  /**
   * Memory dump of Driver.
   */
  const uint32_t FEATURE_DEBUG_MEMORY_DRIVER_DUMP = (1 << 16);
  /**
   * Connectivity events reported via debug ring buffer.
   */
  const uint32_t FEATURE_DEBUG_RING_BUFFER_CONNECT_EVENT = (1 << 17);
  /**
   * Power events reported via debug ring buffer.
   */
  const uint32_t FEATURE_DEBUG_RING_BUFFER_POWER_EVENT = (1 << 18);
  /**
   * Wakelock events reported via debug ring buffer.
   */
  const uint32_t FEATURE_DEBUG_RING_BUFFER_WAKELOCK_EVENT = (1 << 19);
  /**
   * Vendor data reported via debug ring buffer.
   * This mostly contains firmware event logs.
   */
  const uint32_t FEATURE_DEBUG_RING_BUFFER_VENDOR_DATA = (1 << 20);
  /**
   * Host wake reasons stats collection.
   */
  const uint32_t FEATURE_DEBUG_HOST_WAKE_REASON_STATS = (1 << 21);
  /**
   * Error alerts.
   */
  const uint32_t FEATURE_DEBUG_ERROR_ALERTS = (1 << 22);
  /**
   * WPA3-Personal SAE.
   */
  const uint32_t FEATURE_WPA3_SAE = (1 << 23);
  /**
   * WPA3-Enterprise Suite-B.
   */
  const uint32_t FEATURE_WPA3_SUITE_B = (1 << 24);
  /**
   * Enhanced Open (Opportunistic Wireless Encryption).
   */
  const uint32_t FEATURE_OWE = (1 << 25);
  /**
   * Easy-Connect (Device Provisioning Protocol).
   */
  const uint32_t FEATURE_DPP = (1 << 26);

  /**
   * The integer value to specify each command.
   */
  readonly attribute uint32_t id;

  /**
   * The status code for each command result.
   *
   * Possible values:
   *   SUCCESS,
   *   ERROR_COMMAND_FAILED,
   *   ERROR_INVALID_INTERFACE,
   *   ERROR_INVALID_ARGS,
   *   ERROR_NOT_SUPPORTED,
   *   ERROR_TIMEOUT,
   *   ERROR_UNKNOWN.
   */
  readonly attribute uint32_t status;

  /**
   * Information about the version of the driver and firmware running this chip.
   *
   * The information in these ASCII strings are vendor specific and does not
   * need to follow any particular format. It may be dumped as part of the bug
   * report.
   */
  readonly attribute AString driverVersion;

  readonly attribute AString firmwareVersion;

  /**
   * MAC address of the device.
   */
  readonly attribute AString macAddress;

  /**
   * Name of the network interface, e.g., wlan0.
   */
  readonly attribute AString staInterface;

  readonly attribute AString apInterface;

  /**
   * Contain the features supported by this device.
   *
   * Its value should be a bit mask format as bellow, and the corresponding
   * features are defined as FEATURE_*.
   *
   * | Chip capabilities | STA capabilites |
   *           8                  15
   */
  readonly attribute uint32_t supportedFeatures;

  /**
   * Debug level from supplicant, and the value is defined in
   * nsISupplicantDebugLevel.
   *
   * Possible values: SUP_LOG_*.
   */
  readonly attribute uint32_t debugLevel;

  /**
   * Number of connected clients on softAP.
   */
  readonly attribute uint32_t numStations;

  /**
   * Station link layer statistics
   */
  readonly attribute nsILinkLayerStats linkLayerStats;

  /**
   * Usage flag of certificate defined in nsIWifiCertService.idl.
   */
  readonly attribute uint16_t usageFlag;

  /**
   * Nickname of the certificate.
   */
  readonly attribute AString nickname;

  /**
   * Whether the certificate is duplicated.
   */
  readonly attribute boolean duplicated;

  /**
   * Contains the pin code generated from supplicant for WPS pin display.
   */
  readonly attribute AString generatedPin;

  /**
   * Contains the network configuration in supplicant.
   * Since network selection is handled in Gecko, supplicant should only have
   * one saved network.
   */
  readonly attribute nsIWifiConfiguration wifiConfig;

  /**
   * Query supported channel list
   *
   * Invoke the function to get the return value for GET_CHANNELS_FOR_BAND.
   */
  Array<int32_t> getChannels();

  /**
   * Query signal information from current connected access point
   *
   * Invoke the function to get the return value for SIGNAL_POLL.
   */
  Array<int32_t> signalPoll();

  /**
   * Query single scan results
   *
   * Invoke the function to get the return value for GET_SCAN_RESULTS.
   */
  Array<nsIScanResult> getScanResults();
};
