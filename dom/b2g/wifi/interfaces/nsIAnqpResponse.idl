/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"

/**
 * A generic Internationalized name field used in the Operator Friendly Name ANQP element
 * (see HS2.0 R2 Spec 4.2) and the Venue Name ANQP element (see 802.11-2012 8.4.4.4).
 *
 * Format:
 * | Length | Language Code |   Name   |
 *      1           3         variable
 */
[scriptable, uuid(80176ad1-74b6-4ee7-a591-5bc18f852cfa)]
interface nsII18Name : nsISupports
{
  readonly attribute AString language;
  readonly attribute AString locale;
  readonly attribute AUTF8String text;
};

/**
 * The IP Address Type availability ANQP Element, IEEE802.11-2012 section 8.4.4.9
 *
 * Format:
 *
 * | IP Address |
 *       1
 * b0                           b7
 * | IPv6 Address | IPv4 Address |
 *     2 bits          6 bits
 *
 * IPv4 Address field values:
 * 0 - Address type not available
 * 1 - Public IPv4 address available
 * 2 - Port-restricted IPv4 address available
 * 3 - Single NATed private IPv4 address available
 * 4 - Single NATed private IPv4 address available
 * 5 - Port-restricted IPv4 address and single NATed IPv4 address available
 * 6 - Port-restricted IPv4 address and double NATed IPv4 address available
 * 7 - Availability of the address type is not known
 *
 * IPv6 Address field values:
 * 0 - Address type not available
 * 1 - Address type not available
 * 2 - Availability of the address type not known
 */
[scriptable, uuid(36c6b6d8-342c-4957-b4f8-6610331c44c0)]
interface nsIIpAvailability : nsISupports
{
  readonly attribute int32_t ipv4Availability;
  readonly attribute int32_t ipv6Availability;
};

/**
 * The Expanded EAP Method authentication parameter, IEEE802.11-2012, table 8-189.
 * Used by both Expanded EAP Method and Expanded Inner EAP Method.
 *
 * Format:
 * | Vendor ID | Vendor Type |
 *       3            4
 */
[scriptable, uuid(d7e70587-db7e-4c99-94a7-000d5852fd74)]
interface nsIExpandedEapMethod : nsISupports
{
  readonly attribute int32_t vendorId;
  readonly attribute int64_t vendorType;
};

/**
 * The Non-EAP Inner Authentication Type authentication parameter, IEEE802.11-2012, table 8-188.
 *
 * Format:
 * | Type |
 *    1
 */
[scriptable, uuid(e30ae5d5-1aa3-4793-a87f-5035cc9e2780)]
interface nsINonEapInnerAuth : nsISupports
{
  readonly attribute AString authType;
};

/**
 * The Inner Authentication EAP Method Type authentication parameter, IEEE802.11-2012, table 8-188.
 *
 * Format:
 * | EAP Method ID |
 *         1
 */
[scriptable, uuid(45ddd08e-394b-4f94-933b-2ea14c7bab23)]
interface nsIInnerAuth : nsISupports
{
  readonly attribute int32_t eapMethodId;
};

/**
 * The Credential Type authentication parameter, IEEE802.11-2012, table 8-188.
 * Used by both Credential Type and Tunneled EAP Method Credential Type authentication
 * parameter.
 *
 * Format:
 * | Type |
 *    1
 */
[scriptable, uuid(24fef94d-2ed3-496c-8cc1-d9f1278a96cf)]
interface nsICredentialType : nsISupports
{
  readonly attribute int32_t credentialType;
};

/**
 * The Vendor Specific authentication parameter, IEEE802.11-2012, table 8-188.
 *
 * Format:
 * | Data |
 * variable
 */
[scriptable, uuid(08b23133-3c57-4adf-978f-e7af06f3b482)]
interface nsIVendorSpecificAuth : nsISupports
{
  readonly attribute AString authData;
};

/**
 * An Authentication parameter, part of the NAI Realm ANQP element, specified in
 * IEEE802.11-2012 section 8.4.4.10, table 8-188
 */
[scriptable, uuid(9a6967b5-4c77-47a2-b510-e2f1a8402f12)]
interface nsIAuthParams : nsISupports
{
  Array<uint32_t> getAuthTypeId();
  Array<nsIExpandedEapMethod> getExpandedEapMethod();
  Array<nsINonEapInnerAuth> getNonEapInnerAuth();
  Array<nsIInnerAuth> getInnerAuth();
  Array<nsIExpandedEapMethod> getExpandedInnerEapMethod();
  Array<nsICredentialType> getCredential();
  Array<nsICredentialType> getTunneledCredential();
  Array<nsIVendorSpecificAuth> getVendorSpecificAuth();
};

/**
 * An EAP Method part of the NAI Realm ANQP element, specified in
 * IEEE802.11-2012 section 8.4.4.10, figure 8-420
 *
 * Format:
 * | Length | EAP Method | Auth Param Count | Auth Param #1 (optional) | ....
 *     1          1               1                 variable
 */
[scriptable, uuid(2957b8eb-890a-4f47-89dc-b3bb05457c52)]
interface nsIEapMethod : nsISupports
{
  readonly attribute int32_t eapMethodId;
  readonly attribute nsIAuthParams authParams;
};

/**
 * The NAI Realm Data ANQP sub-element, IEEE802.11-2012 section 8.4.4.10 figure 8-418.
 *
 * Format:
 * | Length | Encoding | NAIRealm Length | NAIRealm | EAPMethod Count | EAPMethod #1 (optional) |
 *     2         1               1         variable          1                  variable
 */
[scriptable, uuid(023bf9a7-892c-4e86-ad82-90d12915dbe1)]
interface nsINAIRealmData : nsISupports
{
  Array<AString> getRealms();
  Array<nsIEapMethod> getEapMethods();
};

/**
 * The IEI (Information Element Identity) contained in the Generic Container for the
 * 3GPP Cellular Network ANQP element.
 *
 * Refer to Annex A of 3GPP TS 24.234 version 11.3.0 for information on the data format:
 * (http://www.etsi.org/deliver/etsi_ts/124200_124299/124234/11.03.00_60/ts_124234v110300p.pdf)
 */
[scriptable, uuid(bf8a732a-5f59-42b7-9b8f-b39a7ba12663)]
interface nsICellularNetwork : nsISupports
{
  Array<AString> getPlmnList();
};

/**
 * The WAN Metrics vendor specific ANQP Element,
 * Wi-Fi Alliance Hotspot 2.0 (Release 2) Technical Specification - Version 5.00,
 * section 4.4
 *
 * Format:
 * | WAN Info | Downlink Speed | Uplink Speed | Downlink Load | Uplink Load | LMD |
 *      1             4               4               1              1         2
 *
 * WAN Info Format:
 * | Link Status | Symmetric Link | At Capacity | Reserved |
 *      B0 B1            B2             B3        B4 - B7
 */
[scriptable, uuid(9a912b24-9b4e-498e-be9d-1b9354a23fa6)]
interface nsIWanMetrics : nsISupports
{
  readonly attribute int32_t status;
  readonly attribute boolean symmetric;
  readonly attribute boolean capped;
  readonly attribute int64_t downlinkSpeed;
  readonly attribute int64_t uplinkSpeed;
  readonly attribute int32_t downlinkLoad;
  readonly attribute int32_t uplinkLoad;
  readonly attribute int32_t lmd;
};

/**
 * The ProtoPort Tuple used by Connection Capability vendor specific ANQP Element,
 * Wi-Fi Alliance Hotspot 2.0 (Release 2) Technical Specification - Version 5.00,
 * section 4.5
 *
 * Format:
 * | IP Procotol | Port Number | Status |
 *        1             2           1
 */
[scriptable, uuid(334f7fe9-8c14-406f-af69-f5a881daf343)]
interface nsIProtocolPortTuple : nsISupports
{
  readonly attribute int32_t protocol;
  readonly attribute int32_t port;
  readonly attribute int32_t status;
};

/**
 * The Icons available OSU Providers sub field, as specified in
 * Wi-Fi Alliance Hotspot 2.0 (Release 2) Technical Specification - Version 5.00,
 * section 4.8.1.4
 *
 * Format:
 *
 * | Width | Height | Language | Type Length | Type | Filename Length | Filename |
 *     2       2         3           1       variable        1          variable
 */
[scriptable, uuid(0f651cc5-727b-4be9-9da3-add6fc9f97fe)]
interface nsIIconInfo : nsISupports
{
  readonly attribute int32_t width;
  readonly attribute int32_t height;
  readonly attribute AString language;
  readonly attribute AString iconType;
  readonly attribute AUTF8String fileName;
};

/**
 * Consists of language code and friendly name expressed in the locale for the
 * OSU Provider.
 */
[scriptable, uuid(7eef0678-ae3f-46ec-9c46-22e91a597bd7)]
interface nsIFriendlyNameMap : nsISupports
{
  readonly attribute AString language;
  readonly attribute AUTF8String friendlyName;
};

/**
 * The OSU Provider subfield in the OSU Providers List ANQP Element,
 * Wi-Fi Alliance Hotspot 2.0 (Release 2) Technical Specification - Version 5.00,
 * section 4.8.1
 *
 * Format:
 *
 * | Length | Friendly Name Length | Friendly Name #1 | ... | Friendly Name #n |
 *     2               2                variable                  variable
 * | Server URI length | Server URI | Method List Length | Method List |
 *          1             variable             1             variable
 * | Icon Available Length | Icon Available | NAI Length | NAI | Description Length |
 *            2                variable            1     variable      2
 * | Description #1 | ... | Description #n |
 *      variable               variable
 *
 * | Operator Name Duple #N (optional) |
 *             variable
 */
[scriptable, uuid(45475dcd-b125-4db9-988c-8f4a0a39ffe2)]
interface nsIOsuProviderInfo : nsISupports
{
  readonly attribute AUTF8String serverUri;
  readonly attribute AUTF8String networkAccessIdentifier;

  Array<nsIFriendlyNameMap> getFriendlyNames();
  Array<int32_t> getMethodList();
  Array<nsIIconInfo> getIconInfoList();
  Array<nsII18Name> getServiceDescriptions();
};

/**
 * The OSU Providers List vendor specific ANQP Element,
 * Wi-Fi Alliance Hotspot 2.0 (Release 2) Technical Specification - Version 5.00,
 * section 4.8.
 *
 * Format:
 *
 * | OSU SSID Length | OSU SSID | Number of OSU Providers | Provider #1 | ...
 *          1          variable             1                 variable
 */
[scriptable, uuid(4433230e-fa3e-4c6f-a192-39599dfd33fe)]
interface nsIOsuProviders : nsISupports
{
  readonly attribute AString osuSsid;

  Array<nsIOsuProviderInfo> getProviders();
};

/**
 * Contains ANQP data received from access point.
 */
[scriptable, uuid(fdb160a6-6568-478f-9e7a-43eaa59e0a29)]
interface nsIAnqpResponse : nsISupports
{
  /**
   * Bssid of the access point who sends the ANQP response.
   */
  readonly attribute AString bssid;

  /**
   * Refers to nsIIpAvailability for ip availability.
   */
  readonly attribute nsIIpAvailability ipAvailability;

  /**
   * Refers to nsIWanMetrics for WAN Metrics.
   */
  readonly attribute nsIWanMetrics hsWanMetrics;

  /**
   * Refers to nsIOsuProviders for the OSU Providers List.
   */
  readonly attribute nsIOsuProviders hsOsuProviders;

  /**
   * The Venue Name ANQP Element, IEEE802.11-2012 section 8.4.4.4.
   *
   * Format:
   *
   * | Venue Info | Venue Name Duple #1 (optional) | ...
   *      2                  variable
   *
   * | Venue Name Duple #N (optional) |
   *             variable
   *
   * Refer to {@link I18Name} for the format of the Venue Name Duple
   * fields.
   */
  Array<nsII18Name> getVenueName();

  /**
   * The Roaming Consortium ANQP Element, IEEE802.11-2012 section 8.4.4.7
   *
   ** Format:
   *
   * | OI Duple #1 (optional) | ...
   *         variable
   *
   * | OI Length |     OI     |
   *       1        variable
   */
  Array<int64_t> getRoamingConsortiumOIs();

  /**
   * The NAI (Network Access Identifier) Realm ANQP Element, IEEE802.11-2012 section 8.4.4.10.
   *
   * Format:
   * | NAI Realm Count (optional) | NAI Realm Data #1 (optional) | ....
   *             2                         variable
   */
  Array<nsINAIRealmData> getNaiRealmList();

  /**
   * The 3GPP Cellular Network ANQP Element, IEEE802.11-2012 section 8.4.4.11.
   * The value is embedded in a Generic container User Data (GUD).
   * Refer to Annex A of 3GPP TS 24.234 version 11.3.0 for more info:
   * (http://www.etsi.org/deliver/etsi_ts/124200_124299/124234/11.03.00_60/ts_124234v110300p.pdf).
   *
   * Format:
   * | GUD Version | Length | IEI 1 | ... | IEI N|
   *        1           1    variable
   */
  Array<nsICellularNetwork> getCellularNetwork();

  /**
   * The Domain Name ANQP Element, IEEE802.11-2012 section 8.4.4.15.
   *
   * Format:
   * | Domain Name Field #1 (optional) | ...
   *            variable
   *
   * Domain Name Field Format:
   * | Length | Domain Name |
   *      1       variable
   */
  Array<AString> getDomainName();

  /**
   * The Operator Friendly Name vendor specific ANQP Element,
   * Wi-Fi Alliance Hotspot 2.0 (Release 2) Technical Specification - Version 5.00,
   * section 4.3.
   *
   * Format:
   *
   * | Operator Name Duple #1 (optional) | ...
   *          variable
   *
   * | Operator Name Duple #N (optional) |
   *             variable
   */
  Array<nsII18Name> getOperatorFriendlyName();

  /**
   * The Connection Capability vendor specific ANQP Element,
   * Wi-Fi Alliance Hotspot 2.0 (Release 2) Technical Specification - Version 5.00,
   * section 4.5
   *
   * Format:
   * | ProtoPort Tuple #1 (optiional) | ....
   *                4
   */
  Array<nsIProtocolPortTuple> getConnectionCapability();
};
