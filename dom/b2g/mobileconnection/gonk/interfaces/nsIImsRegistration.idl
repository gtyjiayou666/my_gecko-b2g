/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"

[scriptable, uuid(9b91f5f3-9df9-42b1-8fb3-233755e5e21b)]
interface nsIImsReasonInfo : nsISupports
{

  /**
   * The Reason is unspecified.
   */
  const long CODE_UNSPECIFIED = 0;


  // IMS -> Telephony
  /**
   * The passed argument is invalid.
   */
  const long CODE_LOCAL_ILLEGAL_ARGUMENT = 101;
  /**
   * The operation was invoked while in an invalid call state.
   */
  const long CODE_LOCAL_ILLEGAL_STATE = 102;
  /**
   * IMS service internal error
   */
  const long CODE_LOCAL_INTERNAL_ERROR = 103;
  /**
   * ImsService has crashed (service connection is lost).
   */
  const long CODE_LOCAL_IMS_SERVICE_DOWN = 106;
  /**
   * No pending incoming call exists
   */
  const long CODE_LOCAL_NO_PENDING_CALL = 107;
  /**
   * IMS Call ended during conference merge process
   */
  const long CODE_LOCAL_ENDED_BY_CONFERENCE_MERGE = 108;

  // IMS -> Telephony
  /**
   * Service unavailable; radio power off
   */
  const long CODE_LOCAL_POWER_OFF = 111;
  /**
   * Service unavailable; low battery
   */
  const long CODE_LOCAL_LOW_BATTERY = 112;
  /**
   * Service unavailable; out of service (data service state)
   */
  const long CODE_LOCAL_NETWORK_NO_SERVICE = 121;
  /**
   * Service unavailable; no LTE coverage
   * (VoLTE is not supported even though IMS is registered)
   */
  const long CODE_LOCAL_NETWORK_NO_LTE_COVERAGE = 122;
  /**
   * Service unavailable; located in roaming area
   */
  const long CODE_LOCAL_NETWORK_ROAMING = 123;
  /**
   * Service unavailable; IP changed
   */
  const long CODE_LOCAL_NETWORK_IP_CHANGED = 124;
  /**
   * Service unavailable; for an unspecified reason
   */
  const long CODE_LOCAL_SERVICE_UNAVAILABLE = 131;
  /**
   * Service unavailable; IMS is not registered
   */
  const long CODE_LOCAL_NOT_REGISTERED = 132;

  // IMS <-> Telephony
  /**
   * Maximum number of simultaneous calls exceeded
   */
  const long CODE_LOCAL_CALL_EXCEEDED = 141;
  // IMS <- Telephony
  /**
   * The call is busy.
   */
  const long CODE_LOCAL_CALL_BUSY = 142;
  /**
   * The Call has been declined locally on this device.
   */
  const long CODE_LOCAL_CALL_DECLINE = 143;
  // IMS -> Telephony
  /**
   * Can not complete call; an SRVCC is in progress.
   */
  const long CODE_LOCAL_CALL_VCC_ON_PROGRESSING = 144;
  /**
   * Can not complete call; resource reservation is failed (QoS precondition)
   */
  const long CODE_LOCAL_CALL_RESOURCE_RESERVATION_FAILED = 145;
  /**
   * VoLTE service can't be provided by the network or remote end, retry the call.
   * Resolve the extra code provided in (EXTRA_CODE_CALL_RETRY_*) if the below code is set
   */
  const long CODE_LOCAL_CALL_CS_RETRY_REQUIRED = 146;
  /**
   * VoLTE service can't be provided by the network temporarily, retry the call.
   */
  const long CODE_LOCAL_CALL_VOLTE_RETRY_REQUIRED = 147;
  /**
   * IMS call is already terminated (in TERMINATED state).
   */
  const long CODE_LOCAL_CALL_TERMINATED = 148;
  /**
   * Call was disconnected because a handover is not feasible due to network conditions.
   */
  const long CODE_LOCAL_HO_NOT_FEASIBLE = 149;
  /**
   * This device does not support IMS.
   */
  const long CODE_LOCAL_IMS_NOT_SUPPORTED_ON_DEVICE = 150;

  /*
   * TIMEOUT (IMS -> Telephony)
   */
  /**
   * 1xx waiting timer is expired after sending INVITE request (MO calls only)
   */
  const long CODE_TIMEOUT_1XX_WAITING = 201;
  /**
   * User didn't answer during call setup operation (MO/MT)
   * MO : 200 OK to INVITE request is not received,
   * MT : No action from user after alerting the call
   */
  const long CODE_TIMEOUT_NO_ANSWER = 202;
  /**
   * User no answer during call update operation (MO/MT)
   * MO : 200 OK to re-INVITE request is not received,
   * MT : No action from user after alerting the call
   */
  const long CODE_TIMEOUT_NO_ANSWER_CALL_UPDATE = 203;

  /**
   * The call was blocked by call barring configuration.
   */
  const long CODE_CALL_BARRED = 240;

  /**
   * The operation is restricted to fixed dialing numbers only.
   */
  const long CODE_FDN_BLOCKED = 241;

  /**
   * Network rejected the emergency call request because IMEI was used as identification
   * and this capability is not supported by the network.
   */
  const long CODE_IMEI_NOT_ACCEPTED = 243;

  //STK CC errors
  /**
   * Stk Call Control modified DIAL request to USSD request.
   */
  const long CODE_DIAL_MODIFIED_TO_USSD = 244;
  /**
   * Stk Call Control modified DIAL request to SS request.
   */
  const long CODE_DIAL_MODIFIED_TO_SS = 245;
  /**
   * Stk Call Control modified DIAL request to DIAL with modified data.
   */
  const long CODE_DIAL_MODIFIED_TO_DIAL = 246;
  /**
   * Stk Call Control modified DIAL request to Video DIAL request.
   */
  const long CODE_DIAL_MODIFIED_TO_DIAL_VIDEO = 247;
  /**
   * Stk Call Control modified Video DIAL request to DIAL request.
   */
  const long CODE_DIAL_VIDEO_MODIFIED_TO_DIAL = 248;
  /**
   * Stk Call Control modified Video DIAL request to Video DIAL request.
   */
  const long CODE_DIAL_VIDEO_MODIFIED_TO_DIAL_VIDEO = 249;
  /**
   * Stk Call Control modified Video DIAL request to SS request.
   */
  const long CODE_DIAL_VIDEO_MODIFIED_TO_SS = 250;
  /**
   * Stk Call Control modified Video DIAL request to USSD request.
   */
  const long CODE_DIAL_VIDEO_MODIFIED_TO_USSD = 251;

  /*
   * STATUSCODE (SIP response code) (IMS -> Telephony)
   */
  // 3xx responses
  /**
   * SIP 3xx response: SIP request is redirected
   */
  const long CODE_SIP_REDIRECTED = 321;
  // 4xx responses
  /**
   * Sip 400 response : Bad Request
   */
  const long CODE_SIP_BAD_REQUEST = 331;
  /**
   * Sip 403 response : Forbidden
   */
  const long CODE_SIP_FORBIDDEN = 332;
  /**
   * Sip 404 response : Not Found
   */
  const long CODE_SIP_NOT_FOUND = 333;
  /**
   * Not supported, because of one of the following:
   * SIP response 415 : Unsupported Media Type,
   * SIP response 416 : Unsupported URI Scheme,
   * SIP response 420 : Bad Extension
   */
  const long CODE_SIP_NOT_SUPPORTED = 334;
  /**
   * SIP response 408 : Request Timeout.
   */
  const long CODE_SIP_REQUEST_TIMEOUT = 335;
  /**
   * SIP response 480 : Temporarily Unavailable
   */
  const long CODE_SIP_TEMPRARILY_UNAVAILABLE = 336;
  /**
   * SIP response 484 : Address Incomplete
   */
  const long CODE_SIP_BAD_ADDRESS = 337;
  /**
   * Returned a busy response, may be one of the following:
   * SIP response 486 : Busy Here,
   * SIP response 600 : Busy Everywhere
   */
  const long CODE_SIP_BUSY = 338;
  /**
   * SIP response 487 : Request Terminated
   */
  const long CODE_SIP_REQUEST_CANCELLED = 339;
  /**
   * Received a not acceptable response, will be one of the following:
   * SIP response 406 : Not Acceptable
   * SIP response 488 : Not Acceptable Here
   * SIP response 606 : Not Acceptable
   */
  const long CODE_SIP_NOT_ACCEPTABLE = 340;
  /**
   * Received a not acceptable response, will be one of the following:
   * SIP response 410 : Gone
   * SIP response 604 : Does Not Exist Anywhere
   */
  const long CODE_SIP_NOT_REACHABLE = 341;
  /**
   * Received another unspecified error SIP response from the client.
   */
  const long CODE_SIP_CLIENT_ERROR = 342;
  /**
   * SIP response 481: Transaction Does Not Exist
   */
  const long CODE_SIP_TRANSACTION_DOES_NOT_EXIST = 343;
  // 5xx responses
  /**
   * SIP response 501 : Server Internal Error
   */
  const long CODE_SIP_SERVER_INTERNAL_ERROR = 351;
  /**
   * SIP response 503 : Service Unavailable
   */
  const long CODE_SIP_SERVICE_UNAVAILABLE = 352;
  /**
   * SIP response 504 : Server Time-out
   */
  const long CODE_SIP_SERVER_TIMEOUT = 353;
  /**
   * Received an unspecified SIP server error response.
   */
  const long CODE_SIP_SERVER_ERROR = 354;
  // 6xx responses
  /**
   * 603 : Decline
   */
  const long CODE_SIP_USER_REJECTED = 361;
  /**
   * Unspecified 6xx error.
   */
  const long CODE_SIP_GLOBAL_ERROR = 362;

  /**
   * Emergency call failed in the modem with a temporary fail cause and should be redialed on this
   * slot.
   */
  const long CODE_EMERGENCY_TEMP_FAILURE = 363;
  /**
   * Emergency call failed in the modem with a permanent fail cause and should not be redialed on
   * this slot. If there are any other slots available for emergency calling, try those.
   */
  const long CODE_EMERGENCY_PERM_FAILURE = 364;

  /**
   * Call failure code during hangup/reject if user marked the call as unwanted.
   *
   * Android Telephony will receive information whether ROBO call feature is supported by the
   * network from modem and propagate the same to AOSP as new ImsCallProfile members. OEMs can
   * check this information and provide an option to the user to mark the call as unwanted.
   */
  const long CODE_SIP_USER_MARKED_UNWANTED = 365;

  /**
   * SIP Response : 405
   * Method not allowed for the address in the Request URI
   */
  const long CODE_SIP_METHOD_NOT_ALLOWED = 366;

  /**
   * SIP Response : 407
   * The request requires user authentication
   */
  const long CODE_SIP_PROXY_AUTHENTICATION_REQUIRED = 367;

  /**
   * SIP Response : 413
   * Request body too large
   */
  const long CODE_SIP_REQUEST_ENTITY_TOO_LARGE = 368;

  /**
   * SIP Response : 414
   * Request-URI too large
   */
  const long CODE_SIP_REQUEST_URI_TOO_LARGE = 369;

  /**
   * SIP Response : 421
   * Specific extension is required, which is not present in the HEADER
   */
  const long CODE_SIP_EXTENSION_REQUIRED = 370;

  /**
   * SIP Response : 422
   * The session expiration field too small
   */
  const long CODE_SIP_INTERVAL_TOO_BRIEF = 371;

  /**
   * SIP Response : 481
   * Request received by the server does not match any dialog or transaction
   */
  const long CODE_SIP_CALL_OR_TRANS_DOES_NOT_EXIST = 372;

  /**
   * SIP Response : 482
   * Server has detected a loop
   */
  const long CODE_SIP_LOOP_DETECTED = 373;

  /**
   * SIP Response : 483
   * Max-Forwards value reached
   */
  const long CODE_SIP_TOO_MANY_HOPS = 374;

  /**
   * SIP Response : 485
   * Request-URI is ambiguous
   *
   */
  const long CODE_SIP_AMBIGUOUS = 376;

  /**
   * SIP Response : 491
   * Server has pending request for same dialog
   */
  const long CODE_SIP_REQUEST_PENDING = 377;

  /**
   * SIP Response : 493
   * The request cannot be decrypted by recipient
   */
  const long CODE_SIP_UNDECIPHERABLE = 378;

  /**
   * MEDIA (IMS -> Telephony)
   */
  /**
   * Media resource initialization failed
   */
  const long CODE_MEDIA_INIT_FAILED = 401;
  /**
   * RTP timeout (no audio / video traffic in the session)
   */
  const long CODE_MEDIA_NO_DATA = 402;
  /**
   * Media is not supported; so dropped the call
   */
  const long CODE_MEDIA_NOT_ACCEPTABLE = 403;
  /**
   * Unspecified media related error.
   */
  const long CODE_MEDIA_UNSPECIFIED = 404;

  /*
   * USER
   */
  // Telephony -> IMS
  /**
   * User triggers the call to be terminated.
   */
  const long CODE_USER_TERMINATED = 501;
  /**
   * No action was taken while an incoming call was ringing.
   */
  const long CODE_USER_NOANSWER = 502;
  /**
   * User ignored an incoming call.
   */
  const long CODE_USER_IGNORE = 503;
  /**
   * User declined an incoming call.
   */
  const long CODE_USER_DECLINE = 504;
  /**
   * Device declined/ended a call due to a low battery condition.
   */
  const long CODE_LOW_BATTERY = 505;
  /**
   * Device declined a call due to a blacklisted caller ID.
   */
  const long CODE_BLACKLISTED_CALL_ID = 506;
  // IMS -> Telephony
  /**
   * The call has been terminated by the network or remote user.
   */
  const long CODE_USER_TERMINATED_BY_REMOTE = 510;
  /**
  * Upgrade Downgrade request rejected by
  * Remote user if the request is MO initiated
  * Local user if the request is MT initiated
  */
  const long CODE_USER_REJECTED_SESSION_MODIFICATION = 511;

  /**
  * Upgrade Downgrade request cancelled by the user who initiated it
  */
  const long CODE_USER_CANCELLED_SESSION_MODIFICATION = 512;

  /**
   * UPGRADE DOWNGRADE operation failed
   * This can happen due to failure from SIP/RTP/SDP generation or a Call end is
   * triggered/received while Reinvite is in progress.
   */
  const long CODE_SESSION_MODIFICATION_FAILED = 1517;

  /*
   * UT
   */
  /**
   * UT is currently not supported on this device.
   */
  const long CODE_UT_NOT_SUPPORTED = 801;
  /**
   * UT services are currently not available on this device.
   */
  const long CODE_UT_SERVICE_UNAVAILABLE = 802;
  /**
   * The requested UT operation is not allowed.
   */
  const long CODE_UT_OPERATION_NOT_ALLOWED = 803;
  /**
   * The UT request resulted in a network error.
   */
  const long CODE_UT_NETWORK_ERROR = 804;
  /**
   * The password entered for UT operations does not match the stored password.
   */
  const long CODE_UT_CB_PASSWORD_MISMATCH = 821;
  //STK CC errors
  /**
   * Sim Toolkit Call Control modified the UT operation to a dial command.
   */
  const long CODE_UT_SS_MODIFIED_TO_DIAL = 822;
  /**
   * Sim Toolkit Call Control modified the UT operation to a USSD command.
   */
  const long CODE_UT_SS_MODIFIED_TO_USSD = 823;
  /**
   * Sim Toolkit Call Control modified the UT operation to another supplementary service command.
   */
  const long CODE_UT_SS_MODIFIED_TO_SS = 824;
  /**
   * Sim Toolkit Call Control modified the UT operation to a video call dial command.
   */
  const long CODE_UT_SS_MODIFIED_TO_DIAL_VIDEO = 825;

  /**
   * Emergency callback mode is not supported.
   */
  const long CODE_ECBM_NOT_SUPPORTED = 901;

  /**
   * Fail code used to indicate that Multi-endpoint is not supported by the IMS framework.
   */
  const long CODE_MULTIENDPOINT_NOT_SUPPORTED = 902;

  /**
   * IMS Registration error code
   */
  const long CODE_REGISTRATION_ERROR = 1000;

  /*
   * CALL DROP error codes (Call could drop because of many reasons like Network not available,
   *  handover, failed, etc)
   */
  /**
   * MT call has ended due to a release from the network because the call was answered elsewhere.
   */
  const long CODE_ANSWERED_ELSEWHERE = 1014;

  /**
   * For MultiEndpoint - Call Pull request has failed.
   */
  const long CODE_CALL_PULL_OUT_OF_SYNC = 1015;

  /**
   * For MultiEndpoint - Call has been pulled from primary to secondary.
   */
  const long CODE_CALL_END_CAUSE_CALL_PULL = 1016;

  /**
   * CALL DROP error code for the case when a device is ePDG capable and when the user is on an
   * active wifi call and at the edge of coverage and there is no qualified LTE network available
   * to handover the call to. We get a handover NOT_TRIGERRED message from the modem. This error
   * code is received as part of the handover message.
   */
  const long CODE_CALL_DROP_IWLAN_TO_LTE_UNAVAILABLE = 1100;

  /**
   * For MultiEndPoint - Call was rejected elsewhere
   */
  const long CODE_REJECTED_ELSEWHERE = 1017;

  /**
   * Supplementary services (HOLD/RESUME) failure error codes.
   * Values for Supplemetary services failure - Failed, Cancelled and Re-Invite collision.
   */

  /**
   * Supplementary Services (HOLD/RESUME) - the command failed.
   */
  const long CODE_SUPP_SVC_FAILED = 1201;
  /**
   * Supplementary Services (HOLD/RESUME) - the command was cancelled.
   */
  const long CODE_SUPP_SVC_CANCELLED = 1202;
  /**
   * Supplementary Services (HOLD/RESUME) - the command resulted in a re-invite collision.
   */
  const long CODE_SUPP_SVC_REINVITE_COLLISION = 1203;

  /**
   * DPD Procedure received no response or send failed.
   */
  const long CODE_IWLAN_DPD_FAILURE = 1300;

  /**
   * Establishment of the ePDG Tunnel Failed.
   */
  const long CODE_EPDG_TUNNEL_ESTABLISH_FAILURE = 1400;

  /**
   * Re-keying of the ePDG Tunnel Failed; may not always result in teardown.
   */
  const long CODE_EPDG_TUNNEL_REKEY_FAILURE = 1401;

  /**
   * Connection to the packet gateway is lost.
   */
  const long CODE_EPDG_TUNNEL_LOST_CONNECTION = 1402;

  /**
   * The maximum number of calls allowed has been reached.  Used in a multi-endpoint scenario
   * where the number of calls across all connected devices has reached the maximum.
   */
  const long CODE_MAXIMUM_NUMBER_OF_CALLS_REACHED = 1403;

  /**
   * Similar to {@link #CODE_LOCAL_CALL_DECLINE}, except indicates that a remote device has
   * declined the call.  Used in a multi-endpoint scenario where a remote device declined an
   * incoming call.
   */
  const long CODE_REMOTE_CALL_DECLINE = 1404;

  /**
   * Indicates the call was disconnected due to the user reaching their data limit.
   */
  const long CODE_DATA_LIMIT_REACHED = 1405;

  /**
   * Indicates the call was disconnected due to the user disabling cellular data.
   */
  const long CODE_DATA_DISABLED = 1406;

  /**
   * Indicates a call was disconnected due to loss of wifi signal.
   */
  const long CODE_WIFI_LOST = 1407;

  /**
   * Indicates the registration attempt on IWLAN failed due to IKEv2 authetication failure
   * during tunnel establishment.
   */
  const long CODE_IKEV2_AUTH_FAILURE = 1408;

  /** The call cannot be established because RADIO is OFF */
  const long CODE_RADIO_OFF = 1500;

  /** The call cannot be established because of no valid SIM */
  const long CODE_NO_VALID_SIM = 1501;

  /** The failure is due internal error at modem */
  const long CODE_RADIO_INTERNAL_ERROR = 1502;

  /** The failure is due to UE timer expired while waiting for a response from network */
  const long CODE_NETWORK_RESP_TIMEOUT = 1503;

  /** The failure is due to explicit reject from network */
  const long CODE_NETWORK_REJECT = 1504;

  /** The failure is due to radio access failure. ex. RACH failure */
  const long CODE_RADIO_ACCESS_FAILURE = 1505;

  /** Call/IMS registration failed/dropped because of a RLF */
  const long CODE_RADIO_LINK_FAILURE = 1506;

  /** Call/IMS registration failed/dropped because of radio link lost */
  const long CODE_RADIO_LINK_LOST = 1507;

  /** The call Call/IMS registration failed because of a radio uplink issue */
  const long CODE_RADIO_UPLINK_FAILURE = 1508;

  /** Call failed because of a RRC connection setup failure */
  const long CODE_RADIO_SETUP_FAILURE = 1509;

  /** Call failed/dropped because of RRC connection release from NW */
  const long CODE_RADIO_RELEASE_NORMAL = 1510;

  /** Call failed/dropped because of RRC abnormally released by modem/network */
  const long CODE_RADIO_RELEASE_ABNORMAL = 1511;

  /** Call failed because of access class barring */
  const long CODE_ACCESS_CLASS_BLOCKED = 1512;

  /** Call/IMS registration is failed/dropped because of a network detach */
  const long CODE_NETWORK_DETACH = 1513;

  /**
   * Call failed due to SIP code 380 (Alternative Service response) while dialing an "undetected
   * emergency number".  This scenario is important in some regions where the carrier network will
   * identify other non-emergency help numbers (e.g. mountain rescue) when attempting to dial.
   */
  const long CODE_SIP_ALTERNATE_EMERGENCY_CALL = 1514;

  /**
   * Call failed because of unobtainable number
   */
  const long CODE_UNOBTAINABLE_NUMBER = 1515;

  /**
   * Call failed because WiFi call could not complete and circuit switch silent redial
   * is not allowed while roaming on another network.
   */
  const long CODE_NO_CSFB_IN_CS_ROAM = 1516;

  /**
   * The rejection cause is not known.
   * Used with implicit call rejection.
   */
  const long CODE_REJECT_UNKNOWN = 1600;

  /**
   * Ongoing call, and call waiting is disabled.
   * Used with implicit call rejection.
   */
  const long CODE_REJECT_ONGOING_CALL_WAITING_DISABLED = 1601;

  /**
   * A call is ongoing on another sub.
   * Used with implicit call rejection.
   */
  const long CODE_REJECT_CALL_ON_OTHER_SUB = 1602;

  /**
   * CDMA call collision.
   * Used with implicit call rejection.
   */
  const long CODE_REJECT_1X_COLLISION = 1603;

  /**
   * IMS is not registered for service yet.
   * Used with implicit call rejection.
   */
  const long CODE_REJECT_SERVICE_NOT_REGISTERED = 1604;

  /**
   * The call type is not allowed on the current RAT.
   * Used with implicit call rejection.
   */
  const long CODE_REJECT_CALL_TYPE_NOT_ALLOWED = 1605;

  /**
   * And emergency call is ongoing.
   * Used with implicit call rejection.
   */
  const long CODE_REJECT_ONGOING_E911_CALL = 1606;

  /**
   * Another call is in the process of being establilshed.
   * Used with implicit call rejection.
   */
  const long CODE_REJECT_ONGOING_CALL_SETUP = 1607;

  /**
   * Maximum number of allowed calls are already in progress.
   * Used with implicit call rejection.
   */
  const long CODE_REJECT_MAX_CALL_LIMIT_REACHED = 1608;

  /**
   * Invalid/unsupported SIP headers received.
   * Used with implicit call rejection.
   */
  const long CODE_REJECT_UNSUPPORTED_SIP_HEADERS = 1609;

  /**
   * Invalid/unsupported SDP headers received.
   * Used with implicit call rejection.
   */
  const long CODE_REJECT_UNSUPPORTED_SDP_HEADERS = 1610;

  /**
   * A call transfer is in progress.
   * Used with implicit call rejection.
   */
  const long CODE_REJECT_ONGOING_CALL_TRANSFER = 1611;

  /**
   * An internal error occured while processing the call.
   * Used with implicit call rejection.
   */
  const long CODE_REJECT_INTERNAL_ERROR = 1612;

  /**
   * Call failure due to lack of dedicated bearer.
   * Used with implicit call rejection.
   */
  const long CODE_REJECT_QOS_FAILURE = 1613;

  /**
   * A call handover is in progress.
   * Used with implicit call rejection.
   */
  const long CODE_REJECT_ONGOING_HANDOVER = 1614;

  /**
   * Video calling not supported with TTY.
   * Used with implicit call rejection.
   */
  const long CODE_REJECT_VT_TTY_NOT_ALLOWED = 1615;

  /**
   * A call upgrade is in progress.
   * Used with implicit call rejection.
   */
  const long CODE_REJECT_ONGOING_CALL_UPGRADE = 1616;

  /**
   * Call from conference server, when TTY mode is ON.
   * Used with implicit call rejection.
   */
  const long CODE_REJECT_CONFERENCE_TTY_NOT_ALLOWED = 1617;

  /**
   * A conference call is ongoing.
   * Used with implicit call rejection.
   */
  const long CODE_REJECT_ONGOING_CONFERENCE_CALL = 1618;

  /**
   * A video call with AVPF is not supported.
   * Used with implicit call rejection.
   */
  const long CODE_REJECT_VT_AVPF_NOT_ALLOWED = 1619;

  /**
   * And encrypted call is ongoing; other calls not supported.
   * Used with implicit call rejection.
   */
  const long CODE_REJECT_ONGOING_ENCRYPTED_CALL = 1620;

  /**
   * A CS call is ongoing.
   * Used with implicit call rejection.
   */
  const long CODE_REJECT_ONGOING_CS_CALL = 1621;

  /**
   * An attempt was made to place an emergency call over WFC when emergency services is not
   * currently available in the current location.
   */
  const long CODE_EMERGENCY_CALL_OVER_WFC_NOT_AVAILABLE = 1622;

  /**
   * Indicates that WiFi calling service is not available in the current location.
   */
  const long CODE_WFC_SERVICE_NOT_AVAILABLE_IN_THIS_LOCATION = 1623;

  /**
   * The dialed RTT call should be retried without RTT
   */
  const long CODE_RETRY_ON_IMS_WITHOUT_RTT = 3001;

  /**
   * For the main reason code.
   * Possible values: CODE_*.
   */
  readonly attribute long code;

  /*
   * Extra codes for the specific code value
   * This value can be referred when the code is CODE_LOCAL_CALL_CS_RETRY_REQUIRED.
   */
  /**
   * An extra that may be populated when the {@link CODE_LOCAL_CALL_CS_RETRY_REQUIRED} result has
   * been returned.
   * Try to connect the call using CS
   */
  const long EXTRA_CODE_CALL_RETRY_NORMAL = 1;

  /**
   * An extra that may be populated when the {@link CODE_LOCAL_CALL_CS_RETRY_REQUIRED} result has
   * been returned.
   * Try to connect the call using CS and do not notify the user.
   */
  const long EXTRA_CODE_CALL_RETRY_SILENT_REDIAL = 2;

  /**
   * An extra that may be populated when the {@link CODE_LOCAL_CALL_CS_RETRY_REQUIRED} result has
   * been returned.
   * Try to connect the call using CS by using the settings.
   */
  const long EXTRA_CODE_CALL_RETRY_BY_SETTINGS = 3;

  /**
     * For the extra information code.
     * Possible values: EXTRA_CODE_*.

     */
  readonly attribute long extraCode;

  /**
     * For the extra message of the reason.
     */
  readonly attribute AString extraMessage;
};

[scriptable, uuid(ce59f329-56e0-4b4a-a348-91d256d9aac8)]
interface nsIImsRegistrationListener : nsISupports
{

  void onRegistered(in long imsRadioTech);

  void onRegistering(in long imsRadioTech);

  void onDeregistered(in long reasonInfo, in AString extraMessage);

  void onTechnologyChangeFailed(in long imsRadioTech, in nsIImsReasonInfo reason);
};

[scriptable, uuid(f801e190-12e1-47f0-970b-8b8985f0f381)]
interface nsIImsRegistration : nsISupports
{
  const long RADIO_TECH_NONE = 0;
  const long RADIO_TECH_LTE= 1;
  const long RADIO_TECH_IWLAN = 2;

  long getRegistrationTechnology();

  void addListener(in nsIImsRegistrationListener listener);

  void removeListener(in nsIImsRegistrationListener listener);
};
