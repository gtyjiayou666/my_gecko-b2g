/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"
#include "nsIImsRegistration.idl"

interface nsIImsReasonInfo;
interface nsIImsCallForwardInfo;
interface nsIImsSsInfo;
interface nsIImsClirResponse;

[scriptable, uuid(d476fb59-0fd9-4a28-9538-2eb0be67d242)]
interface nsIImsClirResponse : nsISupports
{
  /**
   * Outgoing state.
   * Possible values are IImsUt.CLIR_OUTGOING_*.
   */
  readonly attribute long clirOutgoingStatus;

  /**
   * CLIR status.
   * Possible values are IImsUt.CLIR_STATUS_*.
   */
  readonly attribute long clirInterrogationStatus;
};

[scriptable, uuid(861def5e-4746-4e22-95df-5fb2e18d7092)]
interface nsIImsSsInfo : nsISupports
{
  /**
   * The SS status, possible values are IImsUt.STATUS_*.
   */
  readonly attribute long status;
};

[scriptable, uuid(e1273f07-d4c0-4c74-b16a-b6eb98cda4c0)]
interface nsIImsCallForwardInfo : nsISupports
{
 /**
  * Call forward condition.
  * Possible values are IImsUt.CDIV_CF_*.
  */
 readonly attribute long condition;

 /**
  * Call forward status.
  * Possible values are IImsUt.CF_STATUS_*.
  */
 readonly attribute long status;

 /**
  * Call forward toa.
  * Possible values are IImsUt.TYPE_OF_ADDRESS_*.
  */
 readonly attribute long toa;

 /**
  * Call forward service class.
  * Possible values are IImtUt.SERVICE_CLASS_*.
  */
 readonly attribute long serviceClass;

 /**
  * Phone number of forwarding address.
  */
 readonly attribute AString number;

 /**
  * Call forward time seconds.
  */
 readonly attribute long timeSeconds;
};

[scriptable, uuid(42a2a47e-6a83-431f-8405-375b8acc6722)]
interface nsIImsUtCallback : nsISupports
{

  /**
   * Notifies the call forward query result.
   * @param id The request id.
   * @param cfInfos The call forward results.
   */
  void onCallForwardQueried(in long id, in Array<nsIImsCallForwardInfo> cfInfos);

  /**
   * Notifies the result of supplementary service configuration updated.
   * For updateCallForward, updateCallBarring,
   * updateCallWaiting and updateCLIR functions.
   * @param id The request id.
   */
  void onUtConfigurationUpdated(in long id);

  /**
   * Notified when update failed.
   * For updateCallForward, updateCallBarring,
   * updateCallWaiting and updateCLIR functions.
   * @param id The request id.
   * @param error
   */
  void onUtConfigurationUpdateFailed(in long id, in nsIImsReasonInfo error);

  /**
   * @param id
   * @param infos
   */
  void onCallBarringQueried(in long id, in nsIImsSsInfo cbInfo);

  /**
   * @param id
   * @param cwInfos
   */
  void onCallWaitingQueried(in long id, in nsIImsSsInfo cwInfo);

  /**
   * Notified when query failed.
   * For queryCallForward, queryCallBarring,
   * queryCallWaiting and queryCLIR functions.
   * @param id The request id.
   * @param error
   */
  void utConfigurationQueryFailed(in long id, in nsIImsReasonInfo error);

  /**
   * @param id
   * @param clirStatus
   */
  void onClirQueried(in long id, in nsIImsClirResponse clirStatus);
};


[scriptable, uuid(618cef94-b9dd-4912-9628-e9e38c36e43e)]
interface nsIImsUt : nsISupports
{

  /**
   * For the status of service registration or activation/deactivation.
   */
  const long STATUS_NOT_REGISTERED = -1;
  const long STATUS_DISABLED = 0;
  const long STATUS_ENABLED = 1;

  /**
   * Call forwarding is not active for any service class.
   */
  const long CF_STATUS_NOT_ACTIVE = 0;

  /**
   * Call forwarding is active for one or more service classes.
   */
  const long CF_STATUS_ACTIVE = 1;

  /**
   * The address defined in {@link #getNumber()} is in an unknown format.
   *
   * See TS 27.007, section 7.11 for more information.
   */
  const long TYPE_OF_ADDRESS_UNKNOWN = 0x81;
  /**
   * The address defined in {@link #getNumber()} is in E.164 international format, which includes
   * international access code "+".
   *
   * See TS 27.007, section 7.11 for more information.
   */
  const long TYPE_OF_ADDRESS_INTERNATIONAL = 0x91;

  /**
   * No call forwarding service class defined.
   *
   * See TS 27.007 7.11 (+CCFC) and 7.4 (CLCK)
   */
  const long SERVICE_CLASS_NONE = 0;

  /**
   * Service class flag for voice telephony.
   *
   * See TS 27.007 7.11 (+CCFC) and 7.4 (CLCK)
   */
  const long SERVICE_CLASS_VOICE = 1;

  /**
   * Service class flag for all data bearers (including
   * {@link #SERVICE_CLASS_DATA_CIRCUIT_SYNC,
   * {@link #SERVICE_CLASS_DATA_CIRCUIT_ASYNC}, {@link #SERVICE_CLASS_PACKET_ACCESS},
   * {@link #SERVICE_CLASS_PAD}}) if supported by the carrier.
   *
   * See TS 27.007 7.11 (+CCFC) and 7.4 (CLCK)
   */
  const long SERVICE_CLASS_DATA = 2;
  /**
   * Service class flag for fax services.
   *
   * See TS 27.007 7.11 (+CCFC) and 7.4 (CLCK)
   */
  const long SERVICE_CLASS_FAX = 4;
  /**
   * Service class flag for SMS services.
   *
   * See TS 27.007 7.11 (+CCFC) and 7.4 (CLCK)
   */
  const long SERVICE_CLASS_SMS = 8;
  /**
   * Service class flag for the synchronous bearer service.
   *
   * See TS 27.007 7.11 (+CCFC) and 7.4 (CLCK)
   */
  const long SERVICE_CLASS_DATA_CIRCUIT_SYNC = 16;

  /**
   * Service class flag for the asynchronous bearer service.
   *
   * See TS 27.007 7.11 (+CCFC) and 7.4 (CLCK)
   */
  const long SERVICE_CLASS_DATA_CIRCUIT_ASYNC = 32;

  /**
   * Service class flag for the packet access bearer service.
   *
   * See TS 27.007 7.11 (+CCFC) and 7.4 (CLCK)
   */
  const long SERVICE_CLASS_DATA_PACKET_ACCESS = 64;

  /**
   * Service class flag for the Packet Assembly/Disassembly bearer service.
   *
   * See TS 27.007 7.11 (+CCFC) and 7.4 (CLCK)
   */
  const long SERVICE_CLASS_DATA_PAD = 128;

  /**
   * Sets callback to receive set/query results.
   * @param callback the callback to receive set/query response.
   * It would be called by MobileConnectionService.jsm MobileConnectionProvider module.
   */
  void setCallback(in nsIImsUtCallback callback);

  /**
   * Actions
   */
  const long ACTION_DEACTIVATION = 0;
  const long ACTION_ACTIVATION = 1;
  const long ACTION_REGISTRATION = 3;
  const long ACTION_ERASURE = 4;
  const long ACTION_INTERROGATION = 5;

  /**
   * CDIV (Communication Diversion, 3GPP TS 24.604)
   */
  const long CDIV_CF_UNCONDITIONAL = 0;
  const long CDIV_CF_BUSY = 1;
  const long CDIV_CF_NO_REPLY = 2;
  const long CDIV_CF_NOT_REACHABLE = 3;
  // For CS service code: 002
  const long CDIV_CF_ALL = 4;
  // For CS service code: 004
  const long CDIV_CF_ALL_CONDITIONAL = 5;
  // It's only supported in the IMS service (CS does not define it).
  // IR.92 recommends that an UE activates both the CFNRc and the CFNL
  // (CDIV using condition not-registered) to the same target.
  const long CDIV_CF_NOT_LOGGED_IN = 6;

  /**
   * To retrieve call forward configuration.
   * The result will be notified via IImsUtCallback.onCallForwardQueried.
   * @param condition, possible values, CDIV_CF_*.
   * @param number Not used.
   * @return the request id.
   *         If return value < 0, means there is an error.
   */
  long queryCallForward(in long condition, in AString number);

  /**
   * @param action is one of IImsUt.ACTION_*.
   * @param condition is one of IImsUt.CDIV_CF_*.
   * @param number Phone number of forwarding address.
   * @param serviceClass Conbination of IImsUt.SERVICE_CLASS_*
   * @param timeSeconds when condiction `IImsUt.CDIV_CF_NO_REPLY` is enabled,
   *        this gives the time in secodns to wait before call is forwarded.
   * @return The request id.
   *         If return value < 0, means there is an error.
   */
  long updateCallForward(in long action, in long condition, in AString number,
                         in long serviceClass, in long timeSeconds);

  /**
   * CB (Communication Barring, 3GPP TS 24.611)
   */
  // Barring of All Incoming Calls
  const long CB_BAIC = 1;
  // Barring of All Outgoing Calls
  const long CB_BAOC = 2;
  // Barring of Outgoing International Calls
  const long CB_BOIC = 3;
  // Barring of Outgoing International Calls - excluding Home Country
  const long CB_BOIC_EXHC = 4;
  // Barring of Incoming Calls - when roaming
  const long CB_BIC_WR = 5;
  // Barring of Anonymous Communication Rejection (ACR) - a particular case of ICB service
  const long CB_BIC_ACR = 6;
  // Barring of All Calls
  const long CB_BA_ALL = 7;
  // Barring of Outgoing Services (Service Code 333 - 3GPP TS 22.030 Table B-1)
  const long CB_BA_MO = 8;
  // Barring of Incoming Services (Service Code 353 - 3GPP TS 22.030 Table B-1)
  const long CB_BA_MT = 9;
  // Barring of Specific Incoming calls
  const long CB_BS_MT = 10;

  /**
   * @param type is one of IImsUt.CB_*.
   * @param serviceClass is one of IImsUt.SERVICE_CLASS*.
   * @return The request id.
   *         If return value < 0, means there is an error.
   */
  long queryCallBarring(in long cbType, in long serviceClass);

  /**
   * Updates the configuration of the call barring for specified service class with password.
   * @param cbType is one of IImsUt.CB_*.
   * @param action is one of IImsUt.ACTION_*.
   * @param barrList the number to be bared. If null is give, apply to all calls.
   * @param serviceClass is one of IImsUt.SERVICE_CLASS_*.
   * @param password call barring password. Could be null or "" is no password specified.
   * @return The request id.
   */
  long updateCallBarring(in long cbType, in long action, in Array<AString> barrList,
                         in long serviceClass, in AString password);

  /**
   * To query call waiting status.
   * @return The request id.
   */
  long queryCallWaiting();

  /**
   * To update call waiting status
   * @param enable boolean to indicates the desired call waiting status.
   * @param serviceClass is one of IImsUt.SERVICE_CLASS_*.
   * @return The request id.
   */
  long updateCallWaiting(in boolean enable, in long serviceClass);

  /**
   * Calling line identification restriction (CLIR) is set to the default according to the
   * subscription of the CLIR service.
   *
   * See TS 27.007, section 7.7 for more information.
   */
  const long CLIR_OUTGOING_DEFAULT = 0;
  /**
   * Activate Calling line identification restriction for outgoing calls.
   *
   * See TS 27.007, section 7.7 for more information.
   */
  const long CLIR_OUTGOING_INVOCATION = 1;
  /**
   * Deactivate Calling line identification restriction for outgoing calls.
   *
   * See TS 27.007, section 7.7 for more information.
   */
  const long CLIR_OUTGOING_SUPPRESSION = 2;

  /**
   * Calling line identification restriction is currently not provisioned.
   *
   * See TS 27.007, section 7.7 for more information.
   */
  const long CLIR_STATUS_NOT_PROVISIONED = 0;
  /**
   * Calling line identification restriction is currently provisioned in permanent mode.
   *
   * See TS 27.007, section 7.7 for more information.
   */
  const long CLIR_STATUS_PROVISIONED_PERMANENT = 1;
  /**
   * Calling line identification restriction is currently unknown, e.g. no network, etc.
   *
   * See TS 27.007, section 7.7 for more information.
   */
  const long CLIR_STATUS_UNKNOWN = 2;
  /**
   * Calling line identification restriction temporary mode, temporarily restricted.
   *
   * See TS 27.007, section 7.7 for more information.
   */
  const long CLIR_STATUS_TEMPORARILY_RESTRICTED = 3;
  /**
   * Calling line identification restriction temporary mode, temporarily allowed.
   *
   * See TS 27.007, section 7.7 for more information.
   */
  const long CLIR_STATUS_TEMPORARILY_ALLOWED = 4;

  /**
   * To query Calling Line Id Restriction status.
   * @return The request id.
   */
  long queryCLIR();

  /**
   * To update Calling Line Id Restriction status.
   * @param clirMode is one of IImsUt.CLIR_OUTGOING_*.
   * @return The request id.
   */
  long updateCLIR(in long clirMode);
};
