/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"

// A default callback with no success or error types.
[scriptable, uuid(1dca95e2-e467-4e28-b38f-7ea0bf78bd61)]
interface nsISidlDefaultResponse : nsISupports
{
  void resolve();
  void reject();
};

// The generic event listener. All events are dispatched
// to this kind of listener, and the `data` field can be
// QI'd to the actual type of the event data.
[scriptable, uuid(e4ce3adf-c7c5-4054-90d6-368b94d40302)]
interface nsISidlEventListener : nsISupports
{
  void handleEvent(in nsISupports data);
};

// Methods implemented by SIDL interfaces that can emit
// events.
[scriptable, uuid(d9958901-9874-43a2-bed5-72a7e7f9d7db)]
interface nsISidlEventTarget : nsISupports
{
  void addEventListener(in long event, in nsISidlEventListener handler);
  void removeEventListener(in long event, in nsISidlEventListener handler);
};

[scriptable, uuid(288afb57-8518-404c-8baf-3f22220524e3)]
interface nsISidlConnectionObserver : nsISupports {
  void disconnected();
  void reconnected();
};

[scriptable, uuid(865bb9c7-d6e7-40c5-b100-d2bda723be0c)]
interface nsIDaemonManager : nsISupports {
  // Allows to set an observer that is notified when the api-deamon
  // status changes.
  void setObserver(in nsISidlConnectionObserver observer);

  // Synchronous access to the current daemon state.
  bool isReady();
};
