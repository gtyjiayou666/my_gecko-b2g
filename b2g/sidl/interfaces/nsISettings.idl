
#include "nsISupports.idl"
#include "nsISidl.idl"

// A setting record.
// TODO: don't use a string for the value, but jsval or nsISupports
[scriptable, uuid(d08a124d-9094-42ee-899a-383e00ca46e6)]
interface nsISettingInfo : nsISupports {
  attribute AString name;
  attribute AString value;
};

// A setting error.
[scriptable, uuid(f18f37f8-5f90-4713-9ea0-05e70a0da364)]
interface nsISettingError : nsISupports {
  const unsigned short UNKNOWN_ERROR = 0;
  const unsigned short NON_EXISTING_SETTING = 1;

  attribute AString name;
  attribute unsigned short reason;
};

// A callback returning a single setting.
[scriptable, uuid(292e5ce6-fd62-4ae6-803b-b001596614f0)]
interface nsISettingsGetResponse : nsISupports
{
  void resolve(in nsISettingInfo setting);
  void reject(in nsISettingError error);
};

// A callback returning an array of setting.
[scriptable, uuid(e2fe92af-5aff-4926-94ef-dc44994a6558)]
interface nsISettingsGetBatchResponse : nsISupports
{
  void resolve(in Array<nsISettingInfo> settings);
  void reject(in nsISettingError error);
};

// The Observer callback.
[scriptable, uuid(f930c8f4-fc7d-4da2-a193-80a96b00786f)]
interface nsISettingsObserver : nsISupports {
  void observeSetting(in nsISettingInfo setting);
};

[scriptable, uuid(943b4eb6-9f2f-4e5e-802b-3847c5ad5521)]
interface nsISettingsManager : nsISidlEventTarget
{
  const short CHANGE_EVENT = 0;

  // Clears the settings database.
  void clear(in nsISidlDefaultResponse callback);

  // Sets the value of a set of settings.
  void set(in Array<nsISettingInfo> settings, in nsISidlDefaultResponse callback);

  // Get the value of a setting.
  void get(in AString name, in nsISettingsGetResponse callback);

  // Get a batch of the values of a name list.
  void getBatch(in Array<AString> names, in nsISettingsGetBatchResponse callback);

  // Adds an observer that will be notified when this setting changes.
  void addObserver(in AString name, in nsISettingsObserver observer, in nsISidlDefaultResponse callback);

  // Removes an observer used to track changes of a setting.
  void removeObserver(in AString name, in nsISettingsObserver observer, in nsISidlDefaultResponse callback);
};
