
#include "nsISupports.idl"
#include "nsISidl.idl"

[scriptable, uuid(5611debf-e524-4a85-acb4-aa97a165eed7)]
interface nsIMatchesResponse : nsISupports
{
    void resolve(in boolean result);
    void reject();
};

[scriptable, uuid(2d0aef1b-e949-4440-99a6-dffc5aa2fc19)]
interface nsIFindBlockedNumbersResponse : nsISupports
{
    void resolve(in Array<AString> results);
    void reject();
};

// This needs to stay in sync with the contacts.sidl enum
[scriptable, uuid(12a6e1bc-25ee-47b0-906a-ee3f3c94584e)]
interface nsIFilterOption : nsISupports {
    const unsigned short Equals = 0;
    const unsigned short Contains = 1;
    const unsigned short Match = 2;
    const unsigned short StartsWith = 3;
    const unsigned short FuzzyMatch = 4;
};

// This needs to stay in sync with the contacts.sidl enum
[scriptable, uuid(7872445c-19f8-40a2-9bf8-ac21ff77a1f0)]
interface nsIFilterByOption : nsISupports {
    const unsigned short Name = 0;
    const unsigned short GivenName = 1;
    const unsigned short FamilyName = 2;
    const unsigned short Tel = 3;
    const unsigned short Email = 4;
    const unsigned short Category = 5;
};

[scriptable, uuid(ea22f64e-9f34-492c-9f0a-f7df8056653b)]
interface nsIBlockedNumberFindOptions : nsISupports {
    attribute AString filterValue;
    attribute unsigned short filterOption;
};

[scriptable, uuid(53af3697-46a1-4928-900b-d61f183a8398)]
interface nsIContactsManager : nsISupports
{
    // matches and findBlockedNumbers api use to call contacts service
    void matches(in unsigned short filterByOption, in unsigned short filterOption, in AString value, in nsIMatchesResponse callback);
    void findBlockedNumbers(in nsIBlockedNumberFindOptions option, in nsIFindBlockedNumbersResponse callback);
};
